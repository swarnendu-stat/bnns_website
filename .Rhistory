library(tmle)
library(mlbench)
# Set a random seed for reproducibility
set.seed(123)
# Simulate data
friedman_ps <- mlbench.friedman1(n = 100, sd = 1)
# Treatment mechanism (propensity score)
ps <- plogis(friedman_ps$y/5)
A <- rbinom(n, 1, ps)  # Treatment assignment
library(bnns)
library(tmle)
library(mlbench)
# Set a random seed for reproducibility
set.seed(123)
# Simulate data
friedman_ps <- mlbench.friedman1(n = 100, sd = 1)
# Treatment mechanism (propensity score)
ps <- plogis(friedman_ps$y/5)
A <- rbinom(n = 100, 1, ps)  # Treatment assignment
friedman_outcome <- mlbench.friedman1(n = 100, sd = 10)
# Outcome mechanism
p_Y <- plogis(A + friedman_outcome$y/5)
Y <- rbinom(n = 100, 1, p_Y)  # Binary outcome
# Combine into a single dataset
sim_data <- cbind.data.frame(Y, A, friedman_outcome$x |> colnames<-(paste0("x", 1:10)))
set.seed(123)
# Simulate data
friedman_ps <- mlbench.friedman1(n = 100, sd = 1)
# Treatment mechanism (propensity score)
ps <- plogis(friedman_ps$y/5)
A <- rbinom(n = 100, 1, ps)  # Treatment assignment
friedman_outcome <- mlbench.friedman1(n = 100, sd = 10)
# Outcome mechanism
p_Y <- plogis(A + friedman_outcome$y/5)
Y <- rbinom(n = 100, 1, p_Y)  # Binary outcome
# Combine into a single dataset
sim_data <- cbind.data.frame(Y, A, friedman_outcome$x |> colnames<-(paste0("x", 1:10)))
# Combine into a single dataset
sim_data <- cbind.data.frame(Y, A, friedman_outcome$x |> `colnames<-`(paste0("x", 1:10)))
# True ATE for comparison
true_ate <- mean(plogis(1 + friedman_outcome$y)) -
mean(plogis(0 + friedman_outcome$y))
true_ate
naive_ate <- mean(sim_data$Y[sim_data$A == 1]) - mean(sim_data$Y[sim_data$A == 0])
naive_ate
Q <- bnns(Y~-1+., data = sim_data, L = 2, nodes = c(32, 8), out_act_fn = 2)
# Q_glm <- glm(Y~., data = data, family = binomial)
Q_A <- predict(Q) # obtain predictions for everyone using the treatment they actually received
sim_data_1 <- sim_data |> transform(A = 1)  # data set where everyone received treatment
Q_1 <- predict(Q, newdata = sim_data_1) # predict on that everyone-exposed data set
sim_data_0 <- sim_data |> transform(A = 0) # data set where no one received treatment
Q_0 <- predict(Q, newdata = sim_data_0)
dat_tmle <- lapply(1:dim(Q_A)[2], function(i) data.frame(Y = sim_data$Y, A = sim_data$A, Q_A = Q_A[,i], Q_0 = Q_0[,i], Q_1 = Q_1[,i]))
g <- bnns(A~-1+. - Y, data = sim_data, L = 2, nodes = c(32, 8), out_act_fn = 2)
# g_glm <- glm(A~. - Y, data = data, family = binomial)
g_w <- predict(g) # Pr(A=1|W)
H_1 <- 1/g_w
H_0 <- -1/(1-g_w) # Pr(A=0|W) is 1-Pr(A=1|W)
dat_tmle <- # add clever covariate data to dat_tmle
lapply(1:dim(Q_A)[2], function(i) dat_tmle[[i]] |>
cbind(
H_1 = H_1[,i],
H_0 = H_0[,i]) |>
transform(H_A = ifelse(A == 1, H_1, # if A is 1 (treated), assign H_1
H_0))  # if A is 0 (not treated), assign H_0
)
### Step 3: Estimate fluctuation parameter
tmle_ate_list <- lapply(1:dim(Q_A)[2], function(i){
glm_fit <- glm(Y ~ -1 + offset(qlogis(Q_A)) + H_A, data=dat_tmle[[i]], family=binomial) # fixed intercept logistic regression
eps <- coef(glm_fit) # save the only coefficient, called epsilon in TMLE lit
### Step 4: Update Q's
Q_A_update <- plogis(qlogis(Q_A) + eps*dat_tmle[[i]]$H_A) # updated expected outcome given treatment actually received
Q_1_update <- plogis(qlogis(Q_1) + eps*dat_tmle[[i]]$H_1) # updated expected outcome for everyone receiving treatment
Q_0_update <- plogis(qlogis(Q_0) + eps*dat_tmle[[i]]$H_0) # updated expected outcome for everyone not receiving treatment
### Step 5: Compute ATE
tmle_ate <- mean(Q_1_update - Q_0_update) # mean diff in updated expected outcome estimates
return(tmle_ate)
})
tmle_ate <- unlist(tmle_ate_list)
median(tmle_ate)
true_ate
naive_ate
table(dat$Y)
table(sim_data$Y)
friedman_outcome$y
library(bnns)
library(tmle)
library(mlbench)
# Set a random seed for reproducibility
set.seed(123)
# Simulate data
friedman_ps <- mlbench.friedman1(n = 100, sd = 1)
# Treatment mechanism (propensity score)
ps <- plogis(scale(friedman_ps$y))
A <- rbinom(n = 100, 1, ps)  # Treatment assignment
friedman_outcome <- mlbench.friedman1(n = 100, sd = 10)
# Outcome mechanism
p_Y <- plogis(A + scale(friedman_outcome$y))
Y <- rbinom(n = 100, 1, p_Y)  # Binary outcome
# Combine into a single dataset
sim_data <- cbind.data.frame(Y, A, friedman_outcome$x |> `colnames<-`(paste0("x", 1:10)))
# True ATE for comparison
true_ate <- mean(plogis(1 + friedman_outcome$y)) -
mean(plogis(0 + friedman_outcome$y))
true_ate
naive_ate <- mean(sim_data$Y[sim_data$A == 1]) - mean(sim_data$Y[sim_data$A == 0])
naive_ate
Q <- bnns(Y~-1+., data = sim_data, L = 2, nodes = c(32, 8), out_act_fn = 2)
table(sim_data$Y)
library(bnns)
library(tmle)
library(mlbench)
# Set a random seed for reproducibility
set.seed(123)
# Simulate data
friedman_ps <- mlbench.friedman1(n = 100, sd = 1)
# Treatment mechanism (propensity score)
ps <- plogis(scale(friedman_ps$y))
A <- rbinom(n = 100, 1, ps)  # Treatment assignment
friedman_outcome <- mlbench.friedman1(n = 100, sd = 10)
# Outcome mechanism
p_Y <- plogis(A + scale(friedman_outcome$y))
Y <- rbinom(n = 100, 1, p_Y)  # Binary outcome
# Combine into a single dataset
sim_data <- cbind.data.frame(Y, A, friedman_outcome$x |> `colnames<-`(paste0("x", 1:10)))
# True ATE for comparison
true_ate <- mean(plogis(1 + friedman_outcome$y)) -
mean(plogis(0 + friedman_outcome$y))
true_ate
naive_ate <- mean(sim_data$Y[sim_data$A == 1]) - mean(sim_data$Y[sim_data$A == 0])
naive_ate
Q <- bnns(Y~-1+., data = sim_data, L = 2, nodes = c(32, 8), out_act_fn = 2)
# Q_glm <- glm(Y~., data = data, family = binomial)
Q_A <- predict(Q) # obtain predictions for everyone using the treatment they actually received
sim_data_1 <- sim_data |> transform(A = 1)  # data set where everyone received treatment
Q_1 <- predict(Q, newdata = sim_data_1) # predict on that everyone-exposed data set
sim_data_0 <- sim_data |> transform(A = 0) # data set where no one received treatment
Q_0 <- predict(Q, newdata = sim_data_0)
dat_tmle <- lapply(1:dim(Q_A)[2], function(i) data.frame(Y = sim_data$Y, A = sim_data$A, Q_A = Q_A[,i], Q_0 = Q_0[,i], Q_1 = Q_1[,i]))
g <- bnns(A~-1+. - Y, data = sim_data, L = 2, nodes = c(32, 8), out_act_fn = 2)
# g_glm <- glm(A~. - Y, data = data, family = binomial)
g_w <- predict(g) # Pr(A=1|W)
H_1 <- 1/g_w
H_0 <- -1/(1-g_w) # Pr(A=0|W) is 1-Pr(A=1|W)
dat_tmle <- # add clever covariate data to dat_tmle
lapply(1:dim(Q_A)[2], function(i) dat_tmle[[i]] |>
cbind(
H_1 = H_1[,i],
H_0 = H_0[,i]) |>
transform(H_A = ifelse(A == 1, H_1, # if A is 1 (treated), assign H_1
H_0))  # if A is 0 (not treated), assign H_0
)
### Step 3: Estimate fluctuation parameter
tmle_ate_list <- lapply(1:dim(Q_A)[2], function(i){
glm_fit <- glm(Y ~ -1 + offset(qlogis(Q_A)) + H_A, data=dat_tmle[[i]], family=binomial) # fixed intercept logistic regression
eps <- coef(glm_fit) # save the only coefficient, called epsilon in TMLE lit
### Step 4: Update Q's
Q_A_update <- plogis(qlogis(Q_A) + eps*dat_tmle[[i]]$H_A) # updated expected outcome given treatment actually received
Q_1_update <- plogis(qlogis(Q_1) + eps*dat_tmle[[i]]$H_1) # updated expected outcome for everyone receiving treatment
Q_0_update <- plogis(qlogis(Q_0) + eps*dat_tmle[[i]]$H_0) # updated expected outcome for everyone not receiving treatment
### Step 5: Compute ATE
tmle_ate <- mean(Q_1_update - Q_0_update) # mean diff in updated expected outcome estimates
return(tmle_ate)
})
tmle_ate <- unlist(tmle_ate_list)
median(tmle_ate)
### Step 3: Estimate fluctuation parameter
tmle_ate_list <- lapply(1:dim(Q_A)[2], function(i){
glm_fit <- glm(Y ~ -1 + offset(qlogis(Q_A)) + H_A, data=dat_tmle[[i]], family=binomial) # fixed intercept logistic regression
eps <- coef(glm_fit) # save the only coefficient, called epsilon in TMLE lit
### Step 4: Update Q's
Q_A_update <- with(dat_tmle[[i]], plogis(qlogis(Q_A) + eps*H_A)) # updated expected outcome given treatment actually received
Q_1_update <- with(dat_tmle[[i]], plogis(qlogis(Q_1) + eps*H_1)) # updated expected outcome for everyone receiving treatment
Q_0_update <- with(dat_tmle[[i]], plogis(qlogis(Q_0) + eps*H_0)) # updated expected outcome for everyone not receiving treatment
### Step 5: Compute ATE
tmle_ate <- mean(Q_1_update - Q_0_update) # mean diff in updated expected outcome estimates
return(tmle_ate)
})
tmle_ate <- unlist(tmle_ate_list)
median(tmle_ate)
true_ate
naive_ate
set.seed(123)
# Simulate covariates
n <- 1000
X1 <- rnorm(n)
X2 <- rnorm(n)
U <- rbinom(n, 1, 0.5)  # Unmeasured confounder
# Treatment mechanism (biased by U)
ps <- plogis(0.5 * X1 - 0.5 * X2 + 0.8 * U)
A <- rbinom(n, 1, ps)  # Treatment assignment
# Outcome mechanism (non-linear and confounded by U)
Y_prob <- plogis(1 + 2 * X1^2 - 1.5 * X2 + 1.2 * A + 1.5 * U)
Y <- rbinom(n, 1, Y_prob)
# Combine into a dataset
data <- data.frame(Y, A, X1, X2)
# True ATE (adjusting for confounding and non-linearity)
true_ate <- mean(plogis(1 + 2 * X1^2 - 1.5 * X2 + 1.2 * 1 + 1.5 * U)) -
mean(plogis(1 + 2 * X1^2 - 1.5 * X2 + 1.2 * 0 + 1.5 * U))
true_ate
# Naive ATE (without accounting for confounding or non-linearity)
naive_ate <- mean(data$Y[data$A == 1]) - mean(data$Y[data$A == 0])
naive_ate
set.seed(123)
# Simulate covariates
n <- 1000
X1 <- rnorm(n)
X2 <- rnorm(n)
U <- rbinom(n, 1, 0.5)  # Unmeasured confounder
# Treatment mechanism (biased by U)
ps <- plogis(0.5 * X1 - 0.5 * X2 + 0.8 * U)
A <- rbinom(n, 1, ps)  # Treatment assignment
# Outcome mechanism (non-linear and confounded by U)
Y_prob <- plogis(1 + 2 * X1^2 - 1.5 * X2 + 1.2 * A + 1.5 * U)
Y <- rbinom(n, 1, Y_prob)
# Combine into a dataset
data <- data.frame(Y, A, X1, X2)
# Naive ATE (ignores confounding and non-linearity)
naive_ate <- mean(data$Y[data$A == 1]) - mean(data$Y[data$A == 0])
# TMLE ATE
library(tmle)
tmle_result <- tmle(
Y = data$Y, A = data$A,
W = data[, c("X1", "X2")],
Q.SL.library = c("SL.glm", "SL.mean"),
g.SL.library = c("SL.glm", "SL.mean")
)
# Results
naive_ate
tmle_ate <- tmle_result$estimates$ATE$psi
tmle_ate
true_ate <- mean(plogis(1 + 2 * X1^2 - 1.5 * X2 + 1.2 * 1 + 1.5 * U)) -
mean(plogis(1 + 2 * X1^2 - 1.5 * X2 + 1.2 * 0 + 1.5 * U))
true_ate
set.seed(123)
# Simulate covariates
n <- 100
X1 <- rnorm(n)
X2 <- rnorm(n)
U <- rbinom(n, 1, 0.5)  # Unmeasured confounder
# Treatment mechanism (biased by U)
ps <- plogis(0.5 * X1 - 0.5 * X2 + 0.8 * U)
A <- rbinom(n, 1, ps)  # Treatment assignment
# Outcome mechanism (non-linear and confounded by U)
Y_prob <- plogis(1 + 2 * X1^2 - 1.5 * X2 + 1.2 * A + 1.5 * U)
Y <- rbinom(n, 1, Y_prob)
# Combine into a dataset
data <- data.frame(Y, A, X1, X2)
# Naive ATE (ignores confounding and non-linearity)
naive_ate <- mean(data$Y[data$A == 1]) - mean(data$Y[data$A == 0])
# TMLE ATE
library(tmle)
tmle_result <- tmle(
Y = data$Y, A = data$A,
W = data[, c("X1", "X2")],
Q.SL.library = c("SL.glm", "SL.mean"),
g.SL.library = c("SL.glm", "SL.mean")
)
# Results
naive_ate
tmle_ate <- tmle_result$estimates$ATE$psi
tmle_ate
true_ate <- mean(plogis(1 + 2 * X1^2 - 1.5 * X2 + 1.2 * 1 + 1.5 * U)) -
mean(plogis(1 + 2 * X1^2 - 1.5 * X2 + 1.2 * 0 + 1.5 * U))
true_ate
true_ate
source("~/.active-rstudio-document", echo=TRUE)
set.seed(123)
# Simulate covariates
n <- 1000
X1 <- rnorm(n)
X2 <- rnorm(n)
U <- rbinom(n, 1, 0.5)  # Unmeasured confounder
# Treatment mechanism (biased by U)
ps <- plogis(0.5 * X1 - 0.5 * X2 + 0.8 * U)
A <- rbinom(n, 1, ps)  # Treatment assignment
# Outcome mechanism (non-linear and confounded by U)
Y_prob <- plogis(1 + 2 * X1^2 - 1.5 * X2 + 1.2 * A + 1.5 * U)
Y <- rbinom(n, 1, Y_prob)
# Combine into a dataset
data <- data.frame(Y, A, X1, X2)
# Naive ATE (ignores confounding and non-linearity)
naive_ate <- mean(data$Y[data$A == 1]) - mean(data$Y[data$A == 0])
# TMLE ATE
library(tmle)
tmle_result <- tmle(
Y = data$Y, A = data$A,
W = data[, c("X1", "X2")],
Q.SL.library = c("SL.glm", "SL.mean"),
g.SL.library = c("SL.glm", "SL.mean")
)
# Results
naive_ate
tmle_ate <- tmle_result$estimates$ATE$psi
tmle_ate
true_ate <- mean(plogis(1 + 2 * X1^2 - 1.5 * X2 + 1.2 * 1 + 1.5 * U)) -
mean(plogis(1 + 2 * X1^2 - 1.5 * X2 + 1.2 * 0 + 1.5 * U))
true_ate
blogdown:::preview_site()
blogdown:::preview_site()
blogdown::new_post("Power of Base R")
blogdown::new_post("Using bnns for TMLE")
?blogdown::new_content()
?blogdown::install_theme()
blogdown::install_theme("alex-shpak/hugo-book")
blogdown::build_dir("content/posts/")
?blogdown::new_post()
blogdown::new_post("To delete", time = TRUE)
blogdown::build_dir("content/post/")
blogdown::build_dir("content/post")
?blogdown::build_dir("content/post")
blogdown::build_dir()
install.packages("microbenchmark")
blogdown:::preview_site()
blogdown::stop_server()
blogdown::bundle_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::build_site(build_rmd = TRUE)
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::build_site()
blogdown::serve_site()
blogdown::clean_duplicates()
blogdown::stop_server()
blogdown::build_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::build_site()
blogdown::serve_site()
?blogdown::new_post(title = "bnns")
blogdown::new_post(title = "Bayesian vs Standard Neural Networks")
?bnns::bnns
?bnns:::predict.bnns
knitr::opts_chunk$set(echo = TRUE, comment = "")
set.seed(123)
library(ggplot2)
library(dplyr)
# Simulate dataset
n <- 200  # Sample size
train_frac <- 0.7
train_n <- round(n * train_frac)
dose <- sample(c(0, 10, 50, 100, 200), n, replace = TRUE)  # Drug doses
age <- rnorm(n, mean = 50, sd = 10)  # Age in years
biomarker <- rnorm(n, mean = 1, sd = 0.2)  # Biomarker levels
# Non-linear dose-response function with noise
y <- 1.5 - 0.02 * dose + 0.002 * dose^2 + 0.01 * age - 0.0001 * age^2 +
0.5 * biomarker + 0.05 * dose * biomarker + rnorm(n, 0, 0.5)
data <- data.frame(Dose = dose, Age = age, Biomarker = biomarker, Response = y)
# Split into training and test sets
data_train <- data[1:train_n, ]
data_test <- data[(train_n + 1):n, ]
ggplot(data, aes(x = Dose, y = Response)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "loess", color = "blue") +
labs(title = "Simulated Non-Linear Dose-Response Relationship", x = "Dose", y = "Response") +
theme_minimal()
library(nnet)
nn_model <- nnet(Response ~ Dose + Age + Biomarker, data = data_train, size = 10, linout = TRUE, maxit = 1000)
nn_preds_train <- predict(nn_model, data_train)
nn_preds_test <- predict(nn_model, data_test)
library(bnns)
bnn_model <- bnns(Response ~ Dose + Age + Biomarker, data = data_train,
L = 2,
nodes = c(64, 16),
act_fn = c(3, 3),
out_act_fn = 1,
iter = 1000,
warmup = 200,
thin = 1,
chains = 2,
cores = 2,
seed = 123
)
bnn_preds_train <- predict(bnn_model, data_train)
bnn_preds_test <- predict(bnn_model, data_test)
dim(bnn_preds_test)
bnn_preds_train <- predict(bnn_model, data_train)
bnn_preds_test <- predict(bnn_model, data_test)
bnn_mean_train <- apply(bnn_preds_train, 1, mean, na.rm = TRUE)
bnn_lower_train <- apply(bnn_preds_train, 1, quantile, probs = 0.025, na.rm = TRUE)
bnn_upper_train <- apply(bnn_preds_train, 1, quantile, probs = 0.975, na.rm = TRUE)
bnn_mean_test <- apply(bnn_preds_test, 1, mean, na.rm = TRUE)
bnn_lower_test <- apply(bnn_preds_test, 1, quantile, probs = 0.025, na.rm = TRUE)
bnn_upper_test <- apply(bnn_preds_test, 1, quantile, probs = 0.975, na.rm = TRUE)
df_plot <- data.frame(
True = data_test$Response,
BNN_Mean = bnn_mean_test,
BNN_Lower = bnn_lower_test,
BNN_Upper = bnn_upper_test,
NN_Pred = nn_preds_test
)
ggplot(df_plot, aes(x = True)) +
geom_point(aes(y = BNN_Mean), color = "blue", alpha = 0.6, size = 2) +
geom_errorbar(aes(ymin = BNN_Lower, ymax = BNN_Upper), width = 0.1, color = "blue") +
geom_point(aes(y = NN_Pred), color = "red", alpha = 0.6, size = 2) +
geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "black") +
labs(title = "BNN vs NN Predictions", x = "True Values", y = "Predicted Values") +
theme_minimal()
library(nnet)
nn_model <- nnet(Response ~ Dose + Age + Biomarker, data = data_train, size = 128, linout = TRUE, maxit = 1000)
nn_preds_train <- predict(nn_model, data_train)
nn_preds_test <- predict(nn_model, data_test)
library(bnns)
bnn_model <- bnns(Response ~ -1 + Dose + Age + Biomarker, data = data_train,
L = 3,
nodes = c(64, 16, 4),
act_fn = c(3, 3, 3),
out_act_fn = 1,
iter = 1000,
warmup = 200,
thin = 1,
chains = 2,
cores = 2,
seed = 123
)
bnn_preds_train <- predict(bnn_model, data_train)
bnn_preds_test <- predict(bnn_model, data_test)
bnn_mean_train <- apply(bnn_preds_train, 1, mean, na.rm = TRUE)
bnn_lower_train <- apply(bnn_preds_train, 1, quantile, probs = 0.025, na.rm = TRUE)
bnn_upper_train <- apply(bnn_preds_train, 1, quantile, probs = 0.975, na.rm = TRUE)
bnn_mean_test <- apply(bnn_preds_test, 1, mean, na.rm = TRUE)
bnn_lower_test <- apply(bnn_preds_test, 1, quantile, probs = 0.025, na.rm = TRUE)
bnn_upper_test <- apply(bnn_preds_test, 1, quantile, probs = 0.975, na.rm = TRUE)
df_plot <- data.frame(
True = data_test$Response,
BNN_Mean = bnn_mean_test,
BNN_Lower = bnn_lower_test,
BNN_Upper = bnn_upper_test,
NN_Pred = nn_preds_test
)
ggplot(df_plot, aes(x = True)) +
geom_point(aes(y = BNN_Mean), color = "blue", alpha = 0.6, size = 2) +
geom_errorbar(aes(ymin = BNN_Lower, ymax = BNN_Upper), width = 0.1, color = "blue") +
geom_point(aes(y = NN_Pred), color = "red", alpha = 0.6, size = 2) +
geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "black") +
labs(title = "BNN vs NN Predictions", x = "True Values", y = "Predicted Values") +
theme_minimal()
bnn_preds_train <- predict(bnn_model, data_train)
bnn_preds_test <- predict(bnn_model, data_test)
bnn_mean_train <- apply(bnn_preds_train, 1, medan, na.rm = TRUE)
bnn_preds_train <- predict(bnn_model, data_train)
bnn_preds_test <- predict(bnn_model, data_test)
bnn_mean_train <- apply(bnn_preds_train, 1, median, na.rm = TRUE)
bnn_lower_train <- apply(bnn_preds_train, 1, quantile, probs = 0.025, na.rm = TRUE)
bnn_upper_train <- apply(bnn_preds_train, 1, quantile, probs = 0.975, na.rm = TRUE)
bnn_mean_test <- apply(bnn_preds_test, 1, median, na.rm = TRUE)
bnn_lower_test <- apply(bnn_preds_test, 1, quantile, probs = 0.025, na.rm = TRUE)
bnn_upper_test <- apply(bnn_preds_test, 1, quantile, probs = 0.975, na.rm = TRUE)
df_plot <- data.frame(
True = data_test$Response,
BNN_Mean = bnn_mean_test,
BNN_Lower = bnn_lower_test,
BNN_Upper = bnn_upper_test,
NN_Pred = nn_preds_test
)
ggplot(df_plot, aes(x = True)) +
geom_point(aes(y = BNN_Mean), color = "blue", alpha = 0.6, size = 2) +
geom_errorbar(aes(ymin = BNN_Lower, ymax = BNN_Upper), width = 0.1, color = "blue") +
geom_point(aes(y = NN_Pred), color = "red", alpha = 0.6, size = 2) +
geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "black") +
labs(title = "BNN vs NN Predictions", x = "True Values", y = "Predicted Values") +
theme_minimal()
blogdown:::preview_site()
?nnet
?nnet::nnet
blogdown::build_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::build_site()
knitr::opts_chunk$set(echo = TRUE, comment = "", message = FALSE, warning = FALSE)
library(ggplot2)
library(dplyr)
set.seed(123)
n <- 200  # Small sample, realistic for pilot trials
train_frac <- 0.8
train_n <- round(n * train_frac)
dose <- runif(n, 0, 200)  # Continuous drug dose (0–200 mg)
age <- rnorm(n, mean = 50, sd = 10)  # Age in years
biomarker <- rnorm(n, mean = 1, sd = 0.3)  # Biomarker level
# Latent response function (non-linear)
latent <- 0.5 - 0.01 * dose + 0.0001 * dose^2 + 0.02 * age - 0.0002 * age^2 +
0.8 * biomarker + 0.02 * dose * biomarker + rnorm(n, 0, 0.5)
# Convert to multi-class (0 = None, 1 = Partial, 2 = Full)
response <- cut(latent, breaks = c(-Inf, -0.5, 0.5, Inf), labels = 0:2, right = FALSE)
response <- factor(response, levels = 0:2, labels = c("None", "Partial", "Full"))
data <- data.frame(Dose = dose, Age = age, Biomarker = biomarker, Response = response)
# Split into training and test sets
data_train <- data[1:train_n, ]
data_test <- data[(train_n + 1):n, ]
ggplot(data, aes(x = Dose, y = as.numeric(Response) - 1, color = Response)) +
geom_point(alpha = 0.6) +
geom_smooth(method = "loess", se = FALSE) +
labs(title = "Simulated Treatment Response by Dose",
x = "Dose (mg)", y = "Response (0=None, 1=Partial, 2=Full)",
caption = "Figure 1: Non-linear, noisy treatment response trends.") +
scale_color_manual(values = c("red", "blue", "green")) +
theme_minimal()
