set_engine("MASS")
qda_wflow <- data_wflow |>
add_model(qda_spec)
qda_res <- tryCatch(tune_grid(
object = qda_wflow,
resamples = folds,
grid = 10,
control = ctrl_grid
),
error = function(e){NULL},
warning = function(w){NULL},
finally = {NULL})
member_list[[which(sl_lib == "qda")]] <- qda_res
}
## Lin-SVM
if("lsvm" %in% sl_lib){
lsvm_spec <- svm_linear() |>
set_mode(mode) |>
set_engine("kernlab")
lsvm_wflow <- data_wflow |>
add_model(lsvm_spec)
lsvm_res <- tryCatch(tune_grid(
object = lsvm_wflow,
resamples = folds,
grid = 10,
control = ctrl_grid
),
error = function(e){NULL},
warning = function(w){NULL},
finally = {NULL})
member_list[[which(sl_lib == "lsvm")]] <- lsvm_res
}
## Poly-SVM
if("psvm" %in% sl_lib){
psvm_spec <- svm_poly() |>
set_mode(mode) |>
set_engine("kernlab")
psvm_wflow <- data_wflow |>
add_model(psvm_spec)
psvm_res <- tryCatch(tune_grid(
object = psvm_wflow,
resamples = folds,
grid = 10,
control = ctrl_grid
),
error = function(e){NULL},
warning = function(w){NULL},
finally = {NULL})
member_list[[which(sl_lib == "psvm")]] <- psvm_res
}
## Radial-SVM
if("rsvm" %in% sl_lib){
rsvm_spec <- svm_rbf() |>
set_mode(mode) |>
set_engine("kernlab")
rsvm_wflow <- data_wflow |>
add_model(rsvm_spec)
rsvm_res <- tryCatch(tune_grid(
object = rsvm_wflow,
resamples = folds,
grid = 10,
control = ctrl_grid
),
error = function(e){NULL},
warning = function(w){NULL},
finally = {NULL})
member_list[[which(sl_lib == "rsvm")]] <- rsvm_res
}
names(member_list) <- sl_lib
member_list <- member_list[lengths(member_list) != 0]
data_model_st <- stacks() |>
add_candidates(candidates = do.call(what = as_workflow_set, args = member_list)) |>
blend_predictions() |>
fit_members()
return(data_model_st)
}
los_data <- azprocedure |> na.omit()
los_data_split <- rsample::initial_split(los_data, prop = 0.8)
los_train <- rsample::training(los_data_split)
los_test <- rsample::testing(los_data_split)
los_SL <- SL_tidy(los ~ ., data = los_train, cv_v = 5, mode = "count")
SL_tidy <- function(formula, data, sl_lib = NULL, cv_v = 5, mode = "bin"){
req_pkg_list <- c("xgboost", "ranger", "nnet", "earth", "stats", "glmnet", "discrim", "kernlab", "kknn", "mgcv", "poissonreg", "mlbench", "COUNT", "pscl")
all_pkg <- installed.packages()
has_req_pkgs <- lapply(req_pkg_list, \(x) if(!(x %in% all_pkg)){stop(paste0("Please install package ", x, " using: install.packages('", x, "')"))})
sl_lib_cl <- c("boost", "rf", "nnet",
"logit", "elasto_logit", "qda", "lsvm", "psvm", "rsvm")
sl_lib_reg <- c("boost", "lm", "elasto_lm",
"nnet", "knn", "rf", "lsvm", "psvm", "rsvm")
sl_lib_multi <- c("boost", "rf",
"multi", "elasto_multi", "qda", "lsvm", "psvm", "rsvm")
sl_lib_count <- c("boost", "knn", "rf", "lsvm", "psvm", "rsvm", "poisson",
"elasto_poisson", "poisson_zero")
if(mode == "bin"){
mode <- "classification"
sl_lib_master <- sl_lib_cl
}else if(mode == "cont"){
mode <- "regression"
sl_lib_master <- sl_lib_reg
}else if(mode == "multi"){
mode <- "classification"
sl_lib_master <- sl_lib_multi
}else if(mode == "count"){
mode <- "regression"
sl_lib_master <- sl_lib_count
}
if(is.null(sl_lib)){
sl_lib <- sl_lib_master
}else{
if(!all(sl_lib %in% sl_lib_master)){
stop(paste0("'sl_lib' must be from ", sl_lib_master))
}
}
member_list <- vector(mode = "list", length = length(sl_lib))
data_rec <- recipe(as.formula(formula), data = data) |>
step_dummy(all_nominal_predictors()) |>
step_zv(all_predictors())
data_wflow <- workflow() |>
add_recipe(data_rec)
if(mode == "classification"){
folds <- rsample::vfold_cv(data, v = cv_v, strata = as.character(formula)[2])
}else{
folds <- rsample::vfold_cv(data, v = cv_v)
}
ctrl_grid <- control_stack_grid()
## poisson
if("poisson" %in% sl_lib){
poisson_spec <- poisson_reg() |>
set_mode(mode) |>
set_engine("glm")
poisson_wflow <- data_wflow |>
add_model(poisson_spec)
poisson_res <- tryCatch(tune_grid(
object = poisson_wflow,
resamples = folds,
grid = 10,
control = ctrl_grid
),
error = function(e){NULL},
warning = function(w){NULL},
finally = {NULL})
member_list[[which(sl_lib == "poisson")]] <- poisson_res
}
## elasto_poisson
if("elasto_poisson" %in% sl_lib){
elasto_poisson_spec <- poisson_reg(
penalty = tune(),
mixture = tune()
) |>
set_mode(mode) |>
set_engine("glmnet")
elasto_poisson_wflow <- data_wflow |>
add_model(elasto_poisson_spec)
elasto_poisson_res <- tryCatch(tune_grid(
object = elasto_poisson_wflow,
resamples = folds,
grid = 10,
control = ctrl_grid
),
error = function(e){NULL},
warning = function(w){NULL},
finally = {NULL})
member_list[[which(sl_lib == "elasto_poisson")]] <- elasto_poisson_res
}
## poisson_zero
if("poisson_zero" %in% sl_lib){
poisson_zero_spec <- poisson_reg() |>
set_mode(mode) |>
set_engine("zeroinfl")
poisson_zero_wflow <- data_wflow |>
add_model(poisson_zero_spec)
poisson_zero_res <- tryCatch(tune_grid(
object = poisson_zero_wflow,
resamples = folds,
grid = 10,
control = ctrl_grid
),
error = function(e){NULL},
warning = function(w){NULL},
finally = {NULL})
member_list[[which(sl_lib == "poisson_zero")]] <- poisson_zero_res
}
## Multi
if("multi" %in% sl_lib){
multi_spec <- multinom_reg(
penalty = tune()
) |>
set_mode(mode) |>
set_engine("nnet")
multi_wflow <- data_wflow |>
add_model(multi_spec)
multi_res <- tryCatch(tune_grid(
object = multi_wflow,
resamples = folds,
grid = 10,
control = ctrl_grid
),
error = function(e){NULL},
warning = function(w){NULL},
finally = {NULL})
member_list[[which(sl_lib == "multi")]] <- multi_res
}
## Elasto_Multi
if("elasto_multi" %in% sl_lib){
elasto_multi_spec <- multinom_reg(
penalty = tune(),
mixture = tune()
) |>
set_mode(mode) |>
set_engine("glmnet")
elasto_multi_wflow <- data_wflow |>
add_model(elasto_multi_spec)
elasto_multi_res <- tryCatch(tune_grid(
object = elasto_multi_wflow,
resamples = folds,
grid = 10,
control = ctrl_grid
),
error = function(e){NULL},
warning = function(w){NULL},
finally = {NULL})
member_list[[which(sl_lib == "elasto_multi")]] <- elasto_multi_res
}
## KNN
if("knn" %in% sl_lib){
knn_spec <- nearest_neighbor(
neighbors = tune(),
weight_func = tune(),
dist_power = tune()
) |>
set_mode(mode) |>
set_engine("kknn")
knn_wflow <-
data_wflow |>
add_model(knn_spec)
knn_res <- tryCatch(tune_grid(
object = knn_wflow,
resamples = folds,
grid = 10,
control = ctrl_grid
),
error = function(e){NULL},
warning = function(w){NULL},
finally = {NULL})
member_list[[which(sl_lib == "knn")]] <- knn_res
}
## Boost Tree
if("boost" %in% sl_lib){
boost_spec <- boost_tree(
mtry = tune(),
min_n = tune(),
trees = 500) |>
set_mode(mode) |>
set_engine("xgboost")
boost_wflow <-
data_wflow |>
add_model(boost_spec)
boost_res <- tryCatch(tune_grid(
object = boost_wflow,
resamples = folds,
grid = 10,
control = ctrl_grid
),
error = function(e){NULL},
warning = function(w){NULL},
finally = {NULL})
member_list[[which(sl_lib == "boost")]] <- boost_res
}
## Random Forest
if("rf" %in% sl_lib){
rand_forest_spec <- rand_forest(
mtry = tune(),
min_n = tune(),
trees = 500) |>
set_mode(mode) |>
set_engine("ranger")
rand_forest_wflow <- data_wflow |>
add_model(rand_forest_spec)
rand_forest_res <- tryCatch(tune_grid(
object = rand_forest_wflow,
resamples = folds,
grid = 10,
control = ctrl_grid
),
error = function(e){NULL},
warning = function(w){NULL},
finally = {NULL})
member_list[[which(sl_lib == "rf")]] <- rand_forest_res
}
## Neural Network
if("nnet" %in% sl_lib){
nnet_spec <- mlp(hidden_units = tune(), penalty = tune(), epochs = tune()) |>
set_mode(mode) |>
set_engine("nnet")
nnet_rec <- data_rec |>
step_normalize(all_predictors())
nnet_wflow <- data_wflow |>
add_model(nnet_spec) |>
update_recipe(nnet_rec)
nnet_res <- tryCatch(tune_grid(
object = nnet_wflow,
resamples = folds,
grid = 10,
control = ctrl_grid
),
error = function(e){NULL},
warning = function(w){NULL},
finally = {NULL})
member_list[[which(sl_lib == "nnet")]] <- nnet_res
}
## Logistic
if("logit" %in% sl_lib){
logit_spec <- logistic_reg() |>
set_mode(mode) |>
set_engine("glm")
logit_wflow <- data_wflow |>
add_model(logit_spec)
logit_res <- tryCatch(tune_grid(
object = logit_wflow,
resamples = folds,
grid = 10,
control = ctrl_grid
),
error = function(e){NULL},
warning = function(w){NULL},
finally = {NULL})
member_list[[which(sl_lib == "logit")]] <- logit_res
}
## Logistic
if("lm" %in% sl_lib){
lm_spec <- linear_reg() |>
set_mode(mode) |>
set_engine("lm")
lm_wflow <- data_wflow |>
add_model(lm_spec)
lm_res <- tryCatch(tune_grid(
object = lm_wflow,
resamples = folds,
grid = 10,
control = ctrl_grid
),
error = function(e){NULL},
warning = function(w){NULL},
finally = {NULL})
member_list[[which(sl_lib == "lm")]] <- lm_res
}
## Elastic Logistic
if("elasto_logit" %in% sl_lib){
elasto_logit_spec <- logistic_reg(penalty = tune(),
mixture = tune()) |>
set_mode(mode) |>
set_engine("glmnet")
elasto_logit_wflow <- data_wflow |>
add_model(elasto_logit_spec)
elasto_logit_res <- tryCatch(tune_grid(
object = elasto_logit_wflow,
resamples = folds,
grid = 10,
control = ctrl_grid
),
error = function(e){NULL},
warning = function(w){NULL},
finally = {NULL})
member_list[[which(sl_lib == "elasto_logit")]] <- elasto_logit_res
}
if("elasto_lm" %in% sl_lib){
elasto_lm_spec <- linear_reg(penalty = tune(),
mixture = tune()) |>
set_mode(mode) |>
set_engine("glmnet")
elasto_lm_wflow <- data_wflow |>
add_model(elasto_lm_spec)
elasto_lm_res <- tryCatch(tune_grid(
object = elasto_lm_wflow,
resamples = folds,
grid = 10,
control = ctrl_grid
),
error = function(e){NULL},
warning = function(w){NULL},
finally = {NULL})
member_list[[which(sl_lib == "elasto_lm")]] <- elasto_lm_res
}
## QDA
if("qda" %in% sl_lib){
qda_spec <- discrim_quad() |>
set_mode(mode) |>
set_engine("MASS")
qda_wflow <- data_wflow |>
add_model(qda_spec)
qda_res <- tryCatch(tune_grid(
object = qda_wflow,
resamples = folds,
grid = 10,
control = ctrl_grid
),
error = function(e){NULL},
warning = function(w){NULL},
finally = {NULL})
member_list[[which(sl_lib == "qda")]] <- qda_res
}
## Lin-SVM
if("lsvm" %in% sl_lib){
lsvm_spec <- svm_linear() |>
set_mode(mode) |>
set_engine("kernlab")
lsvm_wflow <- data_wflow |>
add_model(lsvm_spec)
lsvm_res <- tryCatch(tune_grid(
object = lsvm_wflow,
resamples = folds,
grid = 10,
control = ctrl_grid
),
error = function(e){NULL},
warning = function(w){NULL},
finally = {NULL})
member_list[[which(sl_lib == "lsvm")]] <- lsvm_res
}
## Poly-SVM
if("psvm" %in% sl_lib){
psvm_spec <- svm_poly() |>
set_mode(mode) |>
set_engine("kernlab")
psvm_wflow <- data_wflow |>
add_model(psvm_spec)
psvm_res <- tryCatch(tune_grid(
object = psvm_wflow,
resamples = folds,
grid = 10,
control = ctrl_grid
),
error = function(e){NULL},
warning = function(w){NULL},
finally = {NULL})
member_list[[which(sl_lib == "psvm")]] <- psvm_res
}
## Radial-SVM
if("rsvm" %in% sl_lib){
rsvm_spec <- svm_rbf() |>
set_mode(mode) |>
set_engine("kernlab")
rsvm_wflow <- data_wflow |>
add_model(rsvm_spec)
rsvm_res <- tryCatch(tune_grid(
object = rsvm_wflow,
resamples = folds,
grid = 10,
control = ctrl_grid
),
error = function(e){NULL},
warning = function(w){NULL},
finally = {NULL})
member_list[[which(sl_lib == "rsvm")]] <- rsvm_res
}
# names(member_list) <- sl_lib
member_list <- member_list[lengths(member_list) != 0]
data_model_st <- stacks()
for (res in member_list) {
data_model_st <- data_model_st |>
add_candidates(res)
}
data_model_st <- data_model_st |>
blend_predictions() |>
fit_members()
# data_model_st <- stacks() |>
#   add_candidates(candidates = do.call(what = as_workflow_set, args = member_list)) |>
#   blend_predictions() |>
#   fit_members()
return(data_model_st)
}
los_data <- azprocedure |> na.omit()
los_data_split <- rsample::initial_split(los_data, prop = 0.8)
los_train <- rsample::training(los_data_split)
los_test <- rsample::testing(los_data_split)
los_SL <- SL_tidy(los ~ ., data = los_train, cv_v = 5, mode = "count")
?library
blogdown:::preview_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
