blogdown::hugo_build()
blogdown::serve_site()
blogdown::serve_site()
blogdown::hugo_build()
blogdown::hugo_build()
blogdown::serve_site()
dat_tmle
blogdown:::preview_site()
blogdown::stop_server()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
library(bnns)
# Set a random seed for reproducibility
set.seed(123)
# Simulate data
n <- 1000  # Number of samples
p <- 10    # Number of covariates
X <- as.data.frame(matrix(runif(n * p, -1, 1), nrow = n, ncol = p))
colnames(X) <- paste0("X", 1:p)
# Treatment mechanism (propensity score)
ps <- plogis(-2 * X$X1 + 1.5 * X$X2^2 - 0.5 * sin(pi * X$X3))
A <- rbinom(n, 1, ps)  # Treatment assignment
# Outcome mechanism
p_Y <- plogis(-1 + 2 * A + 3 * X$X1 * A - 2 * X$X2^2 * A + 1.5 * sin(pi * X$X3))
Y <- rbinom(n, 1, p_Y)  # Binary outcome
# Combine into a single dataset
sim_data <- cbind.data.frame(Y, A, X)
# True ATE for comparison
true_ate <- mean(plogis(-1 + 2 * 1 + 3 * X$X1 * 1 - 2 * X$X2^2 * 1 + 1.5 * sin(pi * X$X3))) -
mean(plogis(-1 + 2 * 0 + 3 * X$X1 * 0 - 2 * X$X2^2 * 0 + 1.5 * sin(pi * X$X3)))
true_ate
### Step 1: Estimate Q
Q <- bnns(Y ~ -1 + ., data = sim_data, L = 2, nodes = c(2, 2), act_fn = c(2, 2), out_act_fn = 2)
Q_A <- predict(Q) # obtain predictions for everyone using the treatment they actually received
sim_data_1 <- sim_data |> transform(A = 1)  # data set where everyone received treatment
Q_1 <- predict(Q, newdata = sim_data_1) # predict on that everyone-exposed data set
sim_data_0 <- sim_data |> transform(A = 0) # data set where no one received treatment
Q_0 <- predict(Q, newdata = sim_data_0)
dat_tmle <- lapply(1:dim(Q_A)[2], function(i) data.frame(Y = sim_data$Y, A = sim_data$A, Q_A = Q_A[,i], Q_0 = Q_0[,i], Q_1 = Q_1[,i]))
### Step 2: Estimate g and compute H(A,W)
g <- bnns(A ~ -1 + . - Y, data = sim_data, L = 2, nodes = c(2, 2), act_fn = c(2, 2), out_act_fn = 2)
g_w <- predict(g) # Pr(A=1|W)
H_1 <- 1/g_w
H_0 <- -1/(1-g_w) # Pr(A=0|W) is 1-Pr(A=1|W)
dat_tmle <- # add clever covariate data to dat_tmle
lapply(1:dim(Q_A)[2], function(i) dat_tmle[[i]] |>
cbind(
H_1 = H_1[,i],
H_0 = H_0[,i]) |>
transform(H_A = ifelse(A == 1, H_1, # if A is 1 (treated), assign H_1
H_0))  # if A is 0 (not treated), assign H_0
)
### Step 3: Estimate fluctuation parameter
tmle_ate_list <- lapply(1:dim(Q_A)[2], function(i){
glm_fit <- glm(Y ~ -1 + offset(qlogis(Q_A)) + H_A, data=dat_tmle[[i]], family=binomial) # fixed intercept logistic regression
eps <- coef(glm_fit) # save the only coefficient, called epsilon in TMLE lit
### Step 4: Update Q's
Q_A_update <- plogis(qlogis(Q_A) + eps*dat_tmle[[i]]$H_A) # updated expected outcome given treatment actually received
Q_1_update <- plogis(qlogis(Q_1) + eps*dat_tmle[[i]]$H_1) # updated expected outcome for everyone receiving treatment
Q_0_update <- plogis(qlogis(Q_0) + eps*dat_tmle[[i]]$H_0) # updated expected outcome for everyone not receiving treatment
### Step 5: Compute ATE
tmle_ate <- mean(Q_1_update - Q_0_update) # mean diff in updated expected outcome estimates
return(tmle_ate)
})
Q
g
dat_tmle
### Step 3: Estimate fluctuation parameter
tmle_ate_list <- lapply(1:dim(Q_A)[2], function(i){
glm_fit <- glm(Y ~ -1 + offset(qlogis(Q_A)) + H_A, data=dat_tmle[[i]], family=binomial) # fixed intercept logistic regression
eps <- coef(glm_fit) # save the only coefficient, called epsilon in TMLE lit
### Step 4: Update Q's
Q_A_update <- plogis(qlogis(Q_A) + eps*dat_tmle[[i]]$H_A) # updated expected outcome given treatment actually received
Q_1_update <- plogis(qlogis(Q_1) + eps*dat_tmle[[i]]$H_1) # updated expected outcome for everyone receiving treatment
Q_0_update <- plogis(qlogis(Q_0) + eps*dat_tmle[[i]]$H_0) # updated expected outcome for everyone not receiving treatment
### Step 5: Compute ATE
tmle_ate <- mean(Q_1_update - Q_0_update) # mean diff in updated expected outcome estimates
return(tmle_ate)
})
length(dat_tmle)
### Step 3: Estimate fluctuation parameter
tmle_ate_list <- lapply(1:dim(Q_A)[2], function(i){
glm_fit <- glm(Y ~ -1 + offset(qlogis(Q_A)) + H_A, data=dat_tmle[[i]], family=binomial) # fixed intercept logistic regression
eps <- coef(glm_fit) # save the only coefficient, called epsilon in TMLE lit
### Step 4: Update Q's
Q_A_update <- plogis(qlogis(Q_A) + eps*dat_tmle[[i]]$H_A) # updated expected outcome given treatment actually received
Q_1_update <- plogis(qlogis(Q_1) + eps*dat_tmle[[i]]$H_1) # updated expected outcome for everyone receiving treatment
Q_0_update <- plogis(qlogis(Q_0) + eps*dat_tmle[[i]]$H_0) # updated expected outcome for everyone not receiving treatment
### Step 5: Compute ATE
tmle_ate <- mean(Q_1_update - Q_0_update) # mean diff in updated expected outcome estimates
return(tmle_ate)
})
library(bnns)
# Set a random seed for reproducibility
set.seed(123)
# Simulate data
n <- 100  # Number of samples
p <- 10    # Number of covariates
X <- as.data.frame(matrix(runif(n * p, -1, 1), nrow = n, ncol = p))
colnames(X) <- paste0("X", 1:p)
# Treatment mechanism (propensity score)
ps <- plogis(-2 * X$X1 + 1.5 * X$X2^2 - 0.5 * sin(pi * X$X3))
A <- rbinom(n, 1, ps)  # Treatment assignment
# Outcome mechanism
p_Y <- plogis(-1 + 2 * A + 3 * X$X1 * A - 2 * X$X2^2 * A + 1.5 * sin(pi * X$X3))
Y <- rbinom(n, 1, p_Y)  # Binary outcome
# Combine into a single dataset
sim_data <- cbind.data.frame(Y, A, X)
# True ATE for comparison
true_ate <- mean(plogis(-1 + 2 * 1 + 3 * X$X1 * 1 - 2 * X$X2^2 * 1 + 1.5 * sin(pi * X$X3))) -
mean(plogis(-1 + 2 * 0 + 3 * X$X1 * 0 - 2 * X$X2^2 * 0 + 1.5 * sin(pi * X$X3)))
true_ate
### Step 1: Estimate Q
Q <- bnns(Y ~ -1 + ., data = sim_data, L = 2, nodes = c(2, 2), act_fn = c(2, 2), out_act_fn = 2)
Q_A <- predict(Q) # obtain predictions for everyone using the treatment they actually received
sim_data_1 <- sim_data |> transform(A = 1)  # data set where everyone received treatment
Q_1 <- predict(Q, newdata = sim_data_1) # predict on that everyone-exposed data set
sim_data_0 <- sim_data |> transform(A = 0) # data set where no one received treatment
Q_0 <- predict(Q, newdata = sim_data_0)
dat_tmle <- lapply(1:dim(Q_A)[2], function(i) data.frame(Y = sim_data$Y, A = sim_data$A, Q_A = Q_A[,i], Q_0 = Q_0[,i], Q_1 = Q_1[,i]))
### Step 2: Estimate g and compute H(A,W)
g <- bnns(A ~ -1 + . - Y, data = sim_data, L = 2, nodes = c(2, 2), act_fn = c(2, 2), out_act_fn = 2)
g_w <- predict(g) # Pr(A=1|W)
H_1 <- 1/g_w
H_0 <- -1/(1-g_w) # Pr(A=0|W) is 1-Pr(A=1|W)
dat_tmle <- # add clever covariate data to dat_tmle
lapply(1:dim(Q_A)[2], function(i) dat_tmle[[i]] |>
cbind(
H_1 = H_1[,i],
H_0 = H_0[,i]) |>
transform(H_A = ifelse(A == 1, H_1, # if A is 1 (treated), assign H_1
H_0))  # if A is 0 (not treated), assign H_0
)
### Step 3: Estimate fluctuation parameter
tmle_ate_list <- lapply(1:dim(Q_A)[2], function(i){
glm_fit <- glm(Y ~ -1 + offset(qlogis(Q_A)) + H_A, data=dat_tmle[[i]], family=binomial) # fixed intercept logistic regression
eps <- coef(glm_fit) # save the only coefficient, called epsilon in TMLE lit
### Step 4: Update Q's
Q_A_update <- plogis(qlogis(Q_A) + eps*dat_tmle[[i]]$H_A) # updated expected outcome given treatment actually received
Q_1_update <- plogis(qlogis(Q_1) + eps*dat_tmle[[i]]$H_1) # updated expected outcome for everyone receiving treatment
Q_0_update <- plogis(qlogis(Q_0) + eps*dat_tmle[[i]]$H_0) # updated expected outcome for everyone not receiving treatment
### Step 5: Compute ATE
tmle_ate <- mean(Q_1_update - Q_0_update) # mean diff in updated expected outcome estimates
return(tmle_ate)
})
tmle_ate <- unlist(tmle_ate_list)
median(tmle_ate)
blogdown:::preview_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::build_site()
blogdown::build_site()
?blogdown::install_theme()
blogdown::install_theme("loveit")
blogdown::install_theme("https://github.com/dillonzq/LoveIt.git themes/LoveIt")
blogdown::install_theme("dillonzq/LoveIt")
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::build_site()
Q_A <- predict(Q) # obtain predictions for everyone using the treatment they actually received
library(bnns)
library(tmle)
library(mlbench)
# Set a random seed for reproducibility
set.seed(123)
library(bnns)
library(tmle)
library(mlbench)
# Set a random seed for reproducibility
set.seed(123)
# Simulate data
friedman_ps <- mlbench.friedman1(n = 100, sd = 1)
# Treatment mechanism (propensity score)
ps <- plogis(friedman_ps$y/5)
A <- rbinom(n, 1, ps)  # Treatment assignment
library(bnns)
library(tmle)
library(mlbench)
# Set a random seed for reproducibility
set.seed(123)
# Simulate data
friedman_ps <- mlbench.friedman1(n = 100, sd = 1)
# Treatment mechanism (propensity score)
ps <- plogis(friedman_ps$y/5)
A <- rbinom(n = 100, 1, ps)  # Treatment assignment
friedman_outcome <- mlbench.friedman1(n = 100, sd = 10)
# Outcome mechanism
p_Y <- plogis(A + friedman_outcome$y/5)
Y <- rbinom(n = 100, 1, p_Y)  # Binary outcome
# Combine into a single dataset
sim_data <- cbind.data.frame(Y, A, friedman_outcome$x |> colnames<-(paste0("x", 1:10)))
set.seed(123)
# Simulate data
friedman_ps <- mlbench.friedman1(n = 100, sd = 1)
# Treatment mechanism (propensity score)
ps <- plogis(friedman_ps$y/5)
A <- rbinom(n = 100, 1, ps)  # Treatment assignment
friedman_outcome <- mlbench.friedman1(n = 100, sd = 10)
# Outcome mechanism
p_Y <- plogis(A + friedman_outcome$y/5)
Y <- rbinom(n = 100, 1, p_Y)  # Binary outcome
# Combine into a single dataset
sim_data <- cbind.data.frame(Y, A, friedman_outcome$x |> colnames<-(paste0("x", 1:10)))
# Combine into a single dataset
sim_data <- cbind.data.frame(Y, A, friedman_outcome$x |> `colnames<-`(paste0("x", 1:10)))
# True ATE for comparison
true_ate <- mean(plogis(1 + friedman_outcome$y)) -
mean(plogis(0 + friedman_outcome$y))
true_ate
naive_ate <- mean(sim_data$Y[sim_data$A == 1]) - mean(sim_data$Y[sim_data$A == 0])
naive_ate
Q <- bnns(Y~-1+., data = sim_data, L = 2, nodes = c(32, 8), out_act_fn = 2)
# Q_glm <- glm(Y~., data = data, family = binomial)
Q_A <- predict(Q) # obtain predictions for everyone using the treatment they actually received
sim_data_1 <- sim_data |> transform(A = 1)  # data set where everyone received treatment
Q_1 <- predict(Q, newdata = sim_data_1) # predict on that everyone-exposed data set
sim_data_0 <- sim_data |> transform(A = 0) # data set where no one received treatment
Q_0 <- predict(Q, newdata = sim_data_0)
dat_tmle <- lapply(1:dim(Q_A)[2], function(i) data.frame(Y = sim_data$Y, A = sim_data$A, Q_A = Q_A[,i], Q_0 = Q_0[,i], Q_1 = Q_1[,i]))
g <- bnns(A~-1+. - Y, data = sim_data, L = 2, nodes = c(32, 8), out_act_fn = 2)
# g_glm <- glm(A~. - Y, data = data, family = binomial)
g_w <- predict(g) # Pr(A=1|W)
H_1 <- 1/g_w
H_0 <- -1/(1-g_w) # Pr(A=0|W) is 1-Pr(A=1|W)
dat_tmle <- # add clever covariate data to dat_tmle
lapply(1:dim(Q_A)[2], function(i) dat_tmle[[i]] |>
cbind(
H_1 = H_1[,i],
H_0 = H_0[,i]) |>
transform(H_A = ifelse(A == 1, H_1, # if A is 1 (treated), assign H_1
H_0))  # if A is 0 (not treated), assign H_0
)
### Step 3: Estimate fluctuation parameter
tmle_ate_list <- lapply(1:dim(Q_A)[2], function(i){
glm_fit <- glm(Y ~ -1 + offset(qlogis(Q_A)) + H_A, data=dat_tmle[[i]], family=binomial) # fixed intercept logistic regression
eps <- coef(glm_fit) # save the only coefficient, called epsilon in TMLE lit
### Step 4: Update Q's
Q_A_update <- plogis(qlogis(Q_A) + eps*dat_tmle[[i]]$H_A) # updated expected outcome given treatment actually received
Q_1_update <- plogis(qlogis(Q_1) + eps*dat_tmle[[i]]$H_1) # updated expected outcome for everyone receiving treatment
Q_0_update <- plogis(qlogis(Q_0) + eps*dat_tmle[[i]]$H_0) # updated expected outcome for everyone not receiving treatment
### Step 5: Compute ATE
tmle_ate <- mean(Q_1_update - Q_0_update) # mean diff in updated expected outcome estimates
return(tmle_ate)
})
tmle_ate <- unlist(tmle_ate_list)
median(tmle_ate)
true_ate
naive_ate
table(dat$Y)
table(sim_data$Y)
friedman_outcome$y
library(bnns)
library(tmle)
library(mlbench)
# Set a random seed for reproducibility
set.seed(123)
# Simulate data
friedman_ps <- mlbench.friedman1(n = 100, sd = 1)
# Treatment mechanism (propensity score)
ps <- plogis(scale(friedman_ps$y))
A <- rbinom(n = 100, 1, ps)  # Treatment assignment
friedman_outcome <- mlbench.friedman1(n = 100, sd = 10)
# Outcome mechanism
p_Y <- plogis(A + scale(friedman_outcome$y))
Y <- rbinom(n = 100, 1, p_Y)  # Binary outcome
# Combine into a single dataset
sim_data <- cbind.data.frame(Y, A, friedman_outcome$x |> `colnames<-`(paste0("x", 1:10)))
# True ATE for comparison
true_ate <- mean(plogis(1 + friedman_outcome$y)) -
mean(plogis(0 + friedman_outcome$y))
true_ate
naive_ate <- mean(sim_data$Y[sim_data$A == 1]) - mean(sim_data$Y[sim_data$A == 0])
naive_ate
Q <- bnns(Y~-1+., data = sim_data, L = 2, nodes = c(32, 8), out_act_fn = 2)
table(sim_data$Y)
library(bnns)
library(tmle)
library(mlbench)
# Set a random seed for reproducibility
set.seed(123)
# Simulate data
friedman_ps <- mlbench.friedman1(n = 100, sd = 1)
# Treatment mechanism (propensity score)
ps <- plogis(scale(friedman_ps$y))
A <- rbinom(n = 100, 1, ps)  # Treatment assignment
friedman_outcome <- mlbench.friedman1(n = 100, sd = 10)
# Outcome mechanism
p_Y <- plogis(A + scale(friedman_outcome$y))
Y <- rbinom(n = 100, 1, p_Y)  # Binary outcome
# Combine into a single dataset
sim_data <- cbind.data.frame(Y, A, friedman_outcome$x |> `colnames<-`(paste0("x", 1:10)))
# True ATE for comparison
true_ate <- mean(plogis(1 + friedman_outcome$y)) -
mean(plogis(0 + friedman_outcome$y))
true_ate
naive_ate <- mean(sim_data$Y[sim_data$A == 1]) - mean(sim_data$Y[sim_data$A == 0])
naive_ate
Q <- bnns(Y~-1+., data = sim_data, L = 2, nodes = c(32, 8), out_act_fn = 2)
# Q_glm <- glm(Y~., data = data, family = binomial)
Q_A <- predict(Q) # obtain predictions for everyone using the treatment they actually received
sim_data_1 <- sim_data |> transform(A = 1)  # data set where everyone received treatment
Q_1 <- predict(Q, newdata = sim_data_1) # predict on that everyone-exposed data set
sim_data_0 <- sim_data |> transform(A = 0) # data set where no one received treatment
Q_0 <- predict(Q, newdata = sim_data_0)
dat_tmle <- lapply(1:dim(Q_A)[2], function(i) data.frame(Y = sim_data$Y, A = sim_data$A, Q_A = Q_A[,i], Q_0 = Q_0[,i], Q_1 = Q_1[,i]))
g <- bnns(A~-1+. - Y, data = sim_data, L = 2, nodes = c(32, 8), out_act_fn = 2)
# g_glm <- glm(A~. - Y, data = data, family = binomial)
g_w <- predict(g) # Pr(A=1|W)
H_1 <- 1/g_w
H_0 <- -1/(1-g_w) # Pr(A=0|W) is 1-Pr(A=1|W)
dat_tmle <- # add clever covariate data to dat_tmle
lapply(1:dim(Q_A)[2], function(i) dat_tmle[[i]] |>
cbind(
H_1 = H_1[,i],
H_0 = H_0[,i]) |>
transform(H_A = ifelse(A == 1, H_1, # if A is 1 (treated), assign H_1
H_0))  # if A is 0 (not treated), assign H_0
)
### Step 3: Estimate fluctuation parameter
tmle_ate_list <- lapply(1:dim(Q_A)[2], function(i){
glm_fit <- glm(Y ~ -1 + offset(qlogis(Q_A)) + H_A, data=dat_tmle[[i]], family=binomial) # fixed intercept logistic regression
eps <- coef(glm_fit) # save the only coefficient, called epsilon in TMLE lit
### Step 4: Update Q's
Q_A_update <- plogis(qlogis(Q_A) + eps*dat_tmle[[i]]$H_A) # updated expected outcome given treatment actually received
Q_1_update <- plogis(qlogis(Q_1) + eps*dat_tmle[[i]]$H_1) # updated expected outcome for everyone receiving treatment
Q_0_update <- plogis(qlogis(Q_0) + eps*dat_tmle[[i]]$H_0) # updated expected outcome for everyone not receiving treatment
### Step 5: Compute ATE
tmle_ate <- mean(Q_1_update - Q_0_update) # mean diff in updated expected outcome estimates
return(tmle_ate)
})
tmle_ate <- unlist(tmle_ate_list)
median(tmle_ate)
### Step 3: Estimate fluctuation parameter
tmle_ate_list <- lapply(1:dim(Q_A)[2], function(i){
glm_fit <- glm(Y ~ -1 + offset(qlogis(Q_A)) + H_A, data=dat_tmle[[i]], family=binomial) # fixed intercept logistic regression
eps <- coef(glm_fit) # save the only coefficient, called epsilon in TMLE lit
### Step 4: Update Q's
Q_A_update <- with(dat_tmle[[i]], plogis(qlogis(Q_A) + eps*H_A)) # updated expected outcome given treatment actually received
Q_1_update <- with(dat_tmle[[i]], plogis(qlogis(Q_1) + eps*H_1)) # updated expected outcome for everyone receiving treatment
Q_0_update <- with(dat_tmle[[i]], plogis(qlogis(Q_0) + eps*H_0)) # updated expected outcome for everyone not receiving treatment
### Step 5: Compute ATE
tmle_ate <- mean(Q_1_update - Q_0_update) # mean diff in updated expected outcome estimates
return(tmle_ate)
})
tmle_ate <- unlist(tmle_ate_list)
median(tmle_ate)
true_ate
naive_ate
set.seed(123)
# Simulate covariates
n <- 1000
X1 <- rnorm(n)
X2 <- rnorm(n)
U <- rbinom(n, 1, 0.5)  # Unmeasured confounder
# Treatment mechanism (biased by U)
ps <- plogis(0.5 * X1 - 0.5 * X2 + 0.8 * U)
A <- rbinom(n, 1, ps)  # Treatment assignment
# Outcome mechanism (non-linear and confounded by U)
Y_prob <- plogis(1 + 2 * X1^2 - 1.5 * X2 + 1.2 * A + 1.5 * U)
Y <- rbinom(n, 1, Y_prob)
# Combine into a dataset
data <- data.frame(Y, A, X1, X2)
# True ATE (adjusting for confounding and non-linearity)
true_ate <- mean(plogis(1 + 2 * X1^2 - 1.5 * X2 + 1.2 * 1 + 1.5 * U)) -
mean(plogis(1 + 2 * X1^2 - 1.5 * X2 + 1.2 * 0 + 1.5 * U))
true_ate
# Naive ATE (without accounting for confounding or non-linearity)
naive_ate <- mean(data$Y[data$A == 1]) - mean(data$Y[data$A == 0])
naive_ate
set.seed(123)
# Simulate covariates
n <- 1000
X1 <- rnorm(n)
X2 <- rnorm(n)
U <- rbinom(n, 1, 0.5)  # Unmeasured confounder
# Treatment mechanism (biased by U)
ps <- plogis(0.5 * X1 - 0.5 * X2 + 0.8 * U)
A <- rbinom(n, 1, ps)  # Treatment assignment
# Outcome mechanism (non-linear and confounded by U)
Y_prob <- plogis(1 + 2 * X1^2 - 1.5 * X2 + 1.2 * A + 1.5 * U)
Y <- rbinom(n, 1, Y_prob)
# Combine into a dataset
data <- data.frame(Y, A, X1, X2)
# Naive ATE (ignores confounding and non-linearity)
naive_ate <- mean(data$Y[data$A == 1]) - mean(data$Y[data$A == 0])
# TMLE ATE
library(tmle)
tmle_result <- tmle(
Y = data$Y, A = data$A,
W = data[, c("X1", "X2")],
Q.SL.library = c("SL.glm", "SL.mean"),
g.SL.library = c("SL.glm", "SL.mean")
)
# Results
naive_ate
tmle_ate <- tmle_result$estimates$ATE$psi
tmle_ate
true_ate <- mean(plogis(1 + 2 * X1^2 - 1.5 * X2 + 1.2 * 1 + 1.5 * U)) -
mean(plogis(1 + 2 * X1^2 - 1.5 * X2 + 1.2 * 0 + 1.5 * U))
true_ate
set.seed(123)
# Simulate covariates
n <- 100
X1 <- rnorm(n)
X2 <- rnorm(n)
U <- rbinom(n, 1, 0.5)  # Unmeasured confounder
# Treatment mechanism (biased by U)
ps <- plogis(0.5 * X1 - 0.5 * X2 + 0.8 * U)
A <- rbinom(n, 1, ps)  # Treatment assignment
# Outcome mechanism (non-linear and confounded by U)
Y_prob <- plogis(1 + 2 * X1^2 - 1.5 * X2 + 1.2 * A + 1.5 * U)
Y <- rbinom(n, 1, Y_prob)
# Combine into a dataset
data <- data.frame(Y, A, X1, X2)
# Naive ATE (ignores confounding and non-linearity)
naive_ate <- mean(data$Y[data$A == 1]) - mean(data$Y[data$A == 0])
# TMLE ATE
library(tmle)
tmle_result <- tmle(
Y = data$Y, A = data$A,
W = data[, c("X1", "X2")],
Q.SL.library = c("SL.glm", "SL.mean"),
g.SL.library = c("SL.glm", "SL.mean")
)
# Results
naive_ate
tmle_ate <- tmle_result$estimates$ATE$psi
tmle_ate
true_ate <- mean(plogis(1 + 2 * X1^2 - 1.5 * X2 + 1.2 * 1 + 1.5 * U)) -
mean(plogis(1 + 2 * X1^2 - 1.5 * X2 + 1.2 * 0 + 1.5 * U))
true_ate
true_ate
source("~/.active-rstudio-document", echo=TRUE)
set.seed(123)
# Simulate covariates
n <- 1000
X1 <- rnorm(n)
X2 <- rnorm(n)
U <- rbinom(n, 1, 0.5)  # Unmeasured confounder
# Treatment mechanism (biased by U)
ps <- plogis(0.5 * X1 - 0.5 * X2 + 0.8 * U)
A <- rbinom(n, 1, ps)  # Treatment assignment
# Outcome mechanism (non-linear and confounded by U)
Y_prob <- plogis(1 + 2 * X1^2 - 1.5 * X2 + 1.2 * A + 1.5 * U)
Y <- rbinom(n, 1, Y_prob)
# Combine into a dataset
data <- data.frame(Y, A, X1, X2)
# Naive ATE (ignores confounding and non-linearity)
naive_ate <- mean(data$Y[data$A == 1]) - mean(data$Y[data$A == 0])
# TMLE ATE
library(tmle)
tmle_result <- tmle(
Y = data$Y, A = data$A,
W = data[, c("X1", "X2")],
Q.SL.library = c("SL.glm", "SL.mean"),
g.SL.library = c("SL.glm", "SL.mean")
)
# Results
naive_ate
tmle_ate <- tmle_result$estimates$ATE$psi
tmle_ate
true_ate <- mean(plogis(1 + 2 * X1^2 - 1.5 * X2 + 1.2 * 1 + 1.5 * U)) -
mean(plogis(1 + 2 * X1^2 - 1.5 * X2 + 1.2 * 0 + 1.5 * U))
true_ate
blogdown:::preview_site()
