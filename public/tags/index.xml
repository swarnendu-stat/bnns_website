&lt;?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tags on </title>
    
    <link>/</link>
    <description>Recent content in Tags on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 17 Aug 2025 00:00:00 +0000</lastBuildDate>

    
    <atom:link href="/index.xml" rel="self" type="application/rss+xml" />

    <item>
        <title>Tidy SuperLearner</title>

        <link>//post/2025-08-15-tidy-superlearner/</link>
        <pubDate>Sun, 17 Aug 2025 00:00:00 +0000</pubDate>
        

        <guid isPermaLink="true">//post/2025-08-15-tidy-superlearner/</guid><description><h2 id="introduction"><a href="//post/2025-08-15-tidy-superlearner/#introduction" class="header-anchor"></a>Introduction
</h2><p>Ensemble learning is a powerful way to combine multiple machine learning models to boost predictive performance. The <code>SuperLearner</code> R package is a go-to for this, however it only supports <strong>gaussian</strong> or <strong>binomial</strong> to describe the error distribution. Using the clean, flexible <code>tidymodels</code> framework we can implement these functionalities and also <strong>extend</strong> it for multi-class classification, count data regression. In this post, I’ll walk you through how to build a SuperLearner-style ensemble model with <code>tidymodels</code>, keeping things lucid and practical. We’ll cover the key steps, share reusable code, and apply it to real datasets for binary classification, count regression, standard regression, and multi-class classification.</p></description>
        <content:encoded>&lt;![CDATA[<h2 id="introduction"><a href="#introduction" class="header-anchor"></a>Introduction
</h2><p>Ensemble learning is a powerful way to combine multiple machine learning models to boost predictive performance. The <code>SuperLearner</code> R package is a go-to for this, however it only supports <strong>gaussian</strong> or <strong>binomial</strong> to describe the error distribution. Using the clean, flexible <code>tidymodels</code> framework we can implement these functionalities and also <strong>extend</strong> it for multi-class classification, count data regression. In this post, I’ll walk you through how to build a SuperLearner-style ensemble model with <code>tidymodels</code>, keeping things lucid and practical. We’ll cover the key steps, share reusable code, and apply it to real datasets for binary classification, count regression, standard regression, and multi-class classification.</p>
<h2 id="why-tidymodels-for-ensemble-learning"><a href="#why-tidymodels-for-ensemble-learning" class="header-anchor"></a>Why Tidymodels for Ensemble Learning?
</h2><p>The <code>SuperLearner</code> package is great, but <code>tidymodels</code> offers a modular, intuitive workflow that’s perfect for building and tuning ensembles. With packages like <code>recipes</code>, <code>workflows</code>, and <code>stacks</code>, you can preprocess data, define models, and stack them into a robust ensemble with ease. Plus, <code>tidymodels</code> integrates seamlessly with modern R tools, making your code clean and reproducible.</p>
<p>Let’s dive into the process with a clear roadmap and examples you can adapt for your own projects.</p>
<h2 id="packages-youll-need"><a href="#packages-youll-need" class="header-anchor"></a>Packages You’ll Need
</h2><p>First, let’s load the essential packages. These cover everything from data preprocessing to model stacking and evaluation.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(tidymodels, quietly <span style="color:#f92672">=</span> <span style="color:#66d9ef">TRUE</span>)
</span></span></code></pre></div><pre tabindex="0"><code>## Warning: package &#39;tidymodels&#39; was built under R version 4.5.1
</code></pre><pre tabindex="0"><code>## ── Attaching packages ────────────────────────────────────── tidymodels 1.3.0 ──
</code></pre><pre tabindex="0"><code>## ✔ broom        1.0.9     ✔ recipes      1.3.1
## ✔ dials        1.4.1     ✔ rsample      1.3.0
## ✔ dplyr        1.1.4     ✔ tibble       3.2.1
## ✔ ggplot2      3.5.2     ✔ tidyr        1.3.1
## ✔ infer        1.0.9     ✔ tune         1.3.0
## ✔ modeldata    1.5.0     ✔ workflows    1.2.0
## ✔ parsnip      1.3.2     ✔ workflowsets 1.1.1
## ✔ purrr        1.0.4     ✔ yardstick    1.3.2
</code></pre><pre tabindex="0"><code>## Warning: package &#39;broom&#39; was built under R version 4.5.1
</code></pre><pre tabindex="0"><code>## Warning: package &#39;dials&#39; was built under R version 4.5.1
</code></pre><pre tabindex="0"><code>## Warning: package &#39;infer&#39; was built under R version 4.5.1
</code></pre><pre tabindex="0"><code>## Warning: package &#39;modeldata&#39; was built under R version 4.5.1
</code></pre><pre tabindex="0"><code>## Warning: package &#39;parsnip&#39; was built under R version 4.5.1
</code></pre><pre tabindex="0"><code>## Warning: package &#39;recipes&#39; was built under R version 4.5.1
</code></pre><pre tabindex="0"><code>## Warning: package &#39;tune&#39; was built under R version 4.5.1
</code></pre><pre tabindex="0"><code>## Warning: package &#39;workflows&#39; was built under R version 4.5.1
</code></pre><pre tabindex="0"><code>## Warning: package &#39;workflowsets&#39; was built under R version 4.5.1
</code></pre><pre tabindex="0"><code>## Warning: package &#39;yardstick&#39; was built under R version 4.5.1
</code></pre><pre tabindex="0"><code>## ── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──
## ✖ purrr::discard() masks scales::discard()
## ✖ dplyr::filter()  masks stats::filter()
## ✖ dplyr::lag()     masks stats::lag()
## ✖ recipes::step()  masks stats::step()
</code></pre><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(stacks)
</span></span></code></pre></div><pre tabindex="0"><code>## Warning: package &#39;stacks&#39; was built under R version 4.5.1
</code></pre><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(discrim)      <span style="color:#75715e"># For quadratic discriminant analysis (QDA)</span>
</span></span></code></pre></div><pre tabindex="0"><code>## Warning: package &#39;discrim&#39; was built under R version 4.5.1
</code></pre><pre tabindex="0"><code>## 
## Attaching package: &#39;discrim&#39;
</code></pre><pre tabindex="0"><code>## The following object is masked from &#39;package:dials&#39;:
## 
##     smoothness
</code></pre><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(poissonreg)   <span style="color:#75715e"># For Poisson regression</span>
</span></span></code></pre></div><pre tabindex="0"><code>## Warning: package &#39;poissonreg&#39; was built under R version 4.5.1
</code></pre><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">set.seed</span>(<span style="color:#ae81ff">123</span>)         <span style="color:#75715e"># For reproducibility</span>
</span></span></code></pre></div><h2 id="the-four-step-process"><a href="#the-four-step-process" class="header-anchor"></a>The Four-Step Process
</h2><p>Building a SuperLearner with <code>tidymodels</code> boils down to four high-level steps. Think of it as a recipe for ensemble success:</p>
<h3 id="step-1-prep-your-data-with-a-recipe"><a href="#step-1-prep-your-data-with-a-recipe" class="header-anchor"></a>Step 1: Prep Your Data with a Recipe
</h3><p>Use the <code>recipes</code> package to preprocess your data. This ensures all predictors are ready for modeling (e.g., converting categorical variables to dummy variables and removing zero-variance predictors). Of course, you can add more based on your needs and what makes sense.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>data_rec <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">recipe</span>(<span style="color:#a6e22e">as.formula</span>(formula), data <span style="color:#f92672">=</span> data) <span style="color:#f92672">|&gt;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">step_dummy</span>(<span style="color:#a6e22e">all_nominal_predictors</span>()) <span style="color:#f92672">|&gt;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">step_zv</span>(<span style="color:#a6e22e">all_predictors</span>())
</span></span></code></pre></div><h3 id="step-2-build-a-workflow"><a href="#step-2-build-a-workflow" class="header-anchor"></a>Step 2: Build a Workflow
</h3><p>Create a <code>workflow</code> that combines your data recipe with a model specification. For example, if you’re using XGBoost, it might look like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>wflow <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">workflow</span>() <span style="color:#f92672">|&gt;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">add_recipe</span>(data_rec) <span style="color:#f92672">|&gt;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">add_model</span>(boost_spec)  <span style="color:#75715e"># Example: XGBoost model spec</span>
</span></span></code></pre></div><h3 id="step-3-tune-your-models"><a href="#step-3-tune-your-models" class="header-anchor"></a>Step 3: Tune Your Models
</h3><p>Tune each model’s hyperparameters using cross-validation. This step optimizes each algorithm’s performance before stacking.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>tune_results <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">tune_grid</span>(
</span></span><span style="display:flex;"><span>  object <span style="color:#f92672">=</span> wflow,
</span></span><span style="display:flex;"><span>  resamples <span style="color:#f92672">=</span> folds,
</span></span><span style="display:flex;"><span>  grid <span style="color:#f92672">=</span> <span style="color:#ae81ff">10</span>,
</span></span><span style="display:flex;"><span>  control <span style="color:#f92672">=</span> <span style="color:#a6e22e">control_stack_grid</span>()
</span></span><span style="display:flex;"><span>)
</span></span></code></pre></div><h3 id="step-4-stack-the-models"><a href="#step-4-stack-the-models" class="header-anchor"></a>Step 4: Stack the Models
</h3><p>Combine your tuned models into an ensemble using the <code>stacks</code> package. This blends their predictions and fits the final ensemble.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>ensemble_model <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">stacks</span>() <span style="color:#f92672">|&gt;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">add_candidates</span>(<span style="color:#a6e22e">do.call</span>(as_workflow_set, member_list)) <span style="color:#f92672">|&gt;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">blend_predictions</span>() <span style="color:#f92672">|&gt;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">fit_members</span>()
</span></span></code></pre></div><h2 id="a-reusable-function-for-tidymodels-superlearner"><a href="#a-reusable-function-for-tidymodels-superlearner" class="header-anchor"></a>A Reusable Function for Tidymodels SuperLearner
</h2><p>To make this process reusable, I’ve crafted a function that automates the workflow for various model types (e.g., XGBoost, random forest, neural networks) and problem types (binary classification, regression, count data, or multi-class classification). Here’s the polished version:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>sl_tidy_workflow <span style="color:#f92672">&lt;-</span> <span style="color:#66d9ef">function</span>(member, mode) {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> (member <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;poisson&#34;</span>) {
</span></span><span style="display:flex;"><span>    mod_spec <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">poisson_reg</span>() <span style="color:#f92672">|&gt;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">set_mode</span>(mode) <span style="color:#f92672">|&gt;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">set_engine</span>(<span style="color:#e6db74">&#34;glm&#34;</span>)
</span></span><span style="display:flex;"><span>  } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> (member <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;elasto_poisson&#34;</span>) {
</span></span><span style="display:flex;"><span>    mod_spec <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">poisson_reg</span>(penalty <span style="color:#f92672">=</span> <span style="color:#a6e22e">tune</span>(), mixture <span style="color:#f92672">=</span> <span style="color:#a6e22e">tune</span>()) <span style="color:#f92672">|&gt;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">set_mode</span>(mode) <span style="color:#f92672">|&gt;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">set_engine</span>(<span style="color:#e6db74">&#34;glmnet&#34;</span>)
</span></span><span style="display:flex;"><span>  } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> (member <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;poisson_zero&#34;</span>) {
</span></span><span style="display:flex;"><span>    mod_spec <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">poisson_reg</span>() <span style="color:#f92672">|&gt;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">set_mode</span>(mode) <span style="color:#f92672">|&gt;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">set_engine</span>(<span style="color:#e6db74">&#34;zeroinfl&#34;</span>)
</span></span><span style="display:flex;"><span>  } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> (member <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;multi&#34;</span>) {
</span></span><span style="display:flex;"><span>    mod_spec <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">multinom_reg</span>(penalty <span style="color:#f92672">=</span> <span style="color:#a6e22e">tune</span>()) <span style="color:#f92672">|&gt;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">set_mode</span>(mode) <span style="color:#f92672">|&gt;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">set_engine</span>(<span style="color:#e6db74">&#34;nnet&#34;</span>)
</span></span><span style="display:flex;"><span>  } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> (member <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;elasto_multi&#34;</span>) {
</span></span><span style="display:flex;"><span>    mod_spec <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">multinom_reg</span>(penalty <span style="color:#f92672">=</span> <span style="color:#a6e22e">tune</span>(), mixture <span style="color:#f92672">=</span> <span style="color:#a6e22e">tune</span>()) <span style="color:#f92672">|&gt;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">set_mode</span>(mode) <span style="color:#f92672">|&gt;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">set_engine</span>(<span style="color:#e6db74">&#34;glmnet&#34;</span>)
</span></span><span style="display:flex;"><span>  } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> (member <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;knn&#34;</span>) {
</span></span><span style="display:flex;"><span>    mod_spec <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">nearest_neighbor</span>(neighbors <span style="color:#f92672">=</span> <span style="color:#a6e22e">tune</span>(), weight_func <span style="color:#f92672">=</span> <span style="color:#a6e22e">tune</span>(), dist_power <span style="color:#f92672">=</span> <span style="color:#a6e22e">tune</span>()) <span style="color:#f92672">|&gt;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">set_mode</span>(mode) <span style="color:#f92672">|&gt;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">set_engine</span>(<span style="color:#e6db74">&#34;kknn&#34;</span>)
</span></span><span style="display:flex;"><span>  } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> (member <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;boost&#34;</span>) {
</span></span><span style="display:flex;"><span>    mod_spec <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">boost_tree</span>(mtry <span style="color:#f92672">=</span> <span style="color:#a6e22e">tune</span>(), min_n <span style="color:#f92672">=</span> <span style="color:#a6e22e">tune</span>(), trees <span style="color:#f92672">=</span> <span style="color:#ae81ff">500</span>) <span style="color:#f92672">|&gt;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">set_mode</span>(mode) <span style="color:#f92672">|&gt;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">set_engine</span>(<span style="color:#e6db74">&#34;xgboost&#34;</span>)
</span></span><span style="display:flex;"><span>  } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> (member <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;rf&#34;</span>) {
</span></span><span style="display:flex;"><span>    mod_spec <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">rand_forest</span>(mtry <span style="color:#f92672">=</span> <span style="color:#a6e22e">tune</span>(), min_n <span style="color:#f92672">=</span> <span style="color:#a6e22e">tune</span>(), trees <span style="color:#f92672">=</span> <span style="color:#ae81ff">500</span>) <span style="color:#f92672">|&gt;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">set_mode</span>(mode) <span style="color:#f92672">|&gt;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">set_engine</span>(<span style="color:#e6db74">&#34;ranger&#34;</span>)
</span></span><span style="display:flex;"><span>  } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> (member <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;nnet&#34;</span>) {
</span></span><span style="display:flex;"><span>    mod_spec <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">mlp</span>(hidden_units <span style="color:#f92672">=</span> <span style="color:#a6e22e">tune</span>(), penalty <span style="color:#f92672">=</span> <span style="color:#a6e22e">tune</span>(), epochs <span style="color:#f92672">=</span> <span style="color:#a6e22e">tune</span>()) <span style="color:#f92672">|&gt;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">set_mode</span>(mode) <span style="color:#f92672">|&gt;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">set_engine</span>(<span style="color:#e6db74">&#34;nnet&#34;</span>)
</span></span><span style="display:flex;"><span>  } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> (member <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;logit&#34;</span>) {
</span></span><span style="display:flex;"><span>    mod_spec <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">logistic_reg</span>() <span style="color:#f92672">|&gt;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">set_mode</span>(mode) <span style="color:#f92672">|&gt;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">set_engine</span>(<span style="color:#e6db74">&#34;glm&#34;</span>)
</span></span><span style="display:flex;"><span>  } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> (member <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;lm&#34;</span>) {
</span></span><span style="display:flex;"><span>    mod_spec <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">linear_reg</span>() <span style="color:#f92672">|&gt;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">set_mode</span>(mode) <span style="color:#f92672">|&gt;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">set_engine</span>(<span style="color:#e6db74">&#34;lm&#34;</span>)
</span></span><span style="display:flex;"><span>  } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> (member <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;elasto_logit&#34;</span>) {
</span></span><span style="display:flex;"><span>    mod_spec <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">logistic_reg</span>(penalty <span style="color:#f92672">=</span> <span style="color:#a6e22e">tune</span>(), mixture <span style="color:#f92672">=</span> <span style="color:#a6e22e">tune</span>()) <span style="color:#f92672">|&gt;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">set_mode</span>(mode) <span style="color:#f92672">|&gt;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">set_engine</span>(<span style="color:#e6db74">&#34;glmnet&#34;</span>)
</span></span><span style="display:flex;"><span>  } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> (member <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;elasto_lm&#34;</span>) {
</span></span><span style="display:flex;"><span>    mod_spec <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">linear_reg</span>(penalty <span style="color:#f92672">=</span> <span style="color:#a6e22e">tune</span>(), mixture <span style="color:#f92672">=</span> <span style="color:#a6e22e">tune</span>()) <span style="color:#f92672">|&gt;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">set_mode</span>(mode) <span style="color:#f92672">|&gt;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">set_engine</span>(<span style="color:#e6db74">&#34;glmnet&#34;</span>)
</span></span><span style="display:flex;"><span>  } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> (member <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;qda&#34;</span>) {
</span></span><span style="display:flex;"><span>    mod_spec <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">discrim_quad</span>() <span style="color:#f92672">|&gt;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">set_mode</span>(mode) <span style="color:#f92672">|&gt;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">set_engine</span>(<span style="color:#e6db74">&#34;MASS&#34;</span>)
</span></span><span style="display:flex;"><span>  } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> (member <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;lsvm&#34;</span>) {
</span></span><span style="display:flex;"><span>    mod_spec <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">svm_linear</span>() <span style="color:#f92672">|&gt;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">set_mode</span>(mode) <span style="color:#f92672">|&gt;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">set_engine</span>(<span style="color:#e6db74">&#34;kernlab&#34;</span>)
</span></span><span style="display:flex;"><span>  } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> (member <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;psvm&#34;</span>) {
</span></span><span style="display:flex;"><span>    mod_spec <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">svm_poly</span>() <span style="color:#f92672">|&gt;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">set_mode</span>(mode) <span style="color:#f92672">|&gt;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">set_engine</span>(<span style="color:#e6db74">&#34;kernlab&#34;</span>)
</span></span><span style="display:flex;"><span>  } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> (member <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;rsvm&#34;</span>) {
</span></span><span style="display:flex;"><span>    mod_spec <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">svm_rbf</span>() <span style="color:#f92672">|&gt;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">set_mode</span>(mode) <span style="color:#f92672">|&gt;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">set_engine</span>(<span style="color:#e6db74">&#34;kernlab&#34;</span>)
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span>(mod_spec)
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Now, let us implement the above mentioned 4 steps.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>sl_tidy <span style="color:#f92672">&lt;-</span> <span style="color:#66d9ef">function</span>(formula, data, sl_lib <span style="color:#f92672">=</span> <span style="color:#66d9ef">NULL</span>, cv_v <span style="color:#f92672">=</span> <span style="color:#ae81ff">5</span>, mode <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;bin&#34;</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># Check for required packages</span>
</span></span><span style="display:flex;"><span>  req_pkg_list <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">c</span>(<span style="color:#e6db74">&#34;xgboost&#34;</span>, <span style="color:#e6db74">&#34;ranger&#34;</span>, <span style="color:#e6db74">&#34;nnet&#34;</span>, <span style="color:#e6db74">&#34;earth&#34;</span>, <span style="color:#e6db74">&#34;stats&#34;</span>, <span style="color:#e6db74">&#34;glmnet&#34;</span>, <span style="color:#e6db74">&#34;discrim&#34;</span>, <span style="color:#e6db74">&#34;kernlab&#34;</span>, <span style="color:#e6db74">&#34;kknn&#34;</span>, <span style="color:#e6db74">&#34;mgcv&#34;</span>, <span style="color:#e6db74">&#34;poissonreg&#34;</span>, <span style="color:#e6db74">&#34;mlbench&#34;</span>, <span style="color:#e6db74">&#34;COUNT&#34;</span>, <span style="color:#e6db74">&#34;pscl&#34;</span>)
</span></span><span style="display:flex;"><span>  not_installed_pkgs <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">setdiff</span>(req_pkg_list, <span style="color:#a6e22e">installed.packages</span>()[, <span style="color:#ae81ff">1</span>])
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">length</span>(not_installed_pkgs)) {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">stop</span>(<span style="color:#a6e22e">paste0</span>(<span style="color:#e6db74">&#34;Please install: install.packages(c(&#39;&#34;</span>, <span style="color:#a6e22e">paste</span>(not_installed_pkgs, collapse <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#39;,&#39;&#34;</span>), <span style="color:#e6db74">&#34;&#39;))&#34;</span>))
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># Define model libraries for different modes</span>
</span></span><span style="display:flex;"><span>  sl_lib_cl <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">c</span>(<span style="color:#e6db74">&#34;boost&#34;</span>, <span style="color:#e6db74">&#34;rf&#34;</span>, <span style="color:#e6db74">&#34;nnet&#34;</span>, <span style="color:#e6db74">&#34;logit&#34;</span>, <span style="color:#e6db74">&#34;elasto_logit&#34;</span>, <span style="color:#e6db74">&#34;qda&#34;</span>, <span style="color:#e6db74">&#34;lsvm&#34;</span>, <span style="color:#e6db74">&#34;psvm&#34;</span>, <span style="color:#e6db74">&#34;rsvm&#34;</span>)
</span></span><span style="display:flex;"><span>  sl_lib_reg <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">c</span>(<span style="color:#e6db74">&#34;boost&#34;</span>, <span style="color:#e6db74">&#34;lm&#34;</span>, <span style="color:#e6db74">&#34;elasto_lm&#34;</span>, <span style="color:#e6db74">&#34;nnet&#34;</span>, <span style="color:#e6db74">&#34;knn&#34;</span>, <span style="color:#e6db74">&#34;rf&#34;</span>, <span style="color:#e6db74">&#34;lsvm&#34;</span>, <span style="color:#e6db74">&#34;psvm&#34;</span>, <span style="color:#e6db74">&#34;rsvm&#34;</span>)
</span></span><span style="display:flex;"><span>  sl_lib_multi <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">c</span>(<span style="color:#e6db74">&#34;boost&#34;</span>, <span style="color:#e6db74">&#34;rf&#34;</span>, <span style="color:#e6db74">&#34;multi&#34;</span>, <span style="color:#e6db74">&#34;elasto_multi&#34;</span>, <span style="color:#e6db74">&#34;qda&#34;</span>, <span style="color:#e6db74">&#34;lsvm&#34;</span>, <span style="color:#e6db74">&#34;psvm&#34;</span>, <span style="color:#e6db74">&#34;rsvm&#34;</span>)
</span></span><span style="display:flex;"><span>  sl_lib_count <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">c</span>(<span style="color:#e6db74">&#34;boost&#34;</span>, <span style="color:#e6db74">&#34;knn&#34;</span>, <span style="color:#e6db74">&#34;rf&#34;</span>, <span style="color:#e6db74">&#34;lsvm&#34;</span>, <span style="color:#e6db74">&#34;psvm&#34;</span>, <span style="color:#e6db74">&#34;rsvm&#34;</span>, <span style="color:#e6db74">&#34;poisson&#34;</span>, <span style="color:#e6db74">&#34;elasto_poisson&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># Set mode and model library</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> (mode <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;bin&#34;</span>) {
</span></span><span style="display:flex;"><span>    mode <span style="color:#f92672">&lt;-</span> <span style="color:#e6db74">&#34;classification&#34;</span>
</span></span><span style="display:flex;"><span>    sl_lib_master <span style="color:#f92672">&lt;-</span> sl_lib_cl
</span></span><span style="display:flex;"><span>  } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> (mode <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;cont&#34;</span>) {
</span></span><span style="display:flex;"><span>    mode <span style="color:#f92672">&lt;-</span> <span style="color:#e6db74">&#34;regression&#34;</span>
</span></span><span style="display:flex;"><span>    sl_lib_master <span style="color:#f92672">&lt;-</span> sl_lib_reg
</span></span><span style="display:flex;"><span>  } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> (mode <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;multi&#34;</span>) {
</span></span><span style="display:flex;"><span>    mode <span style="color:#f92672">&lt;-</span> <span style="color:#e6db74">&#34;classification&#34;</span>
</span></span><span style="display:flex;"><span>    sl_lib_master <span style="color:#f92672">&lt;-</span> sl_lib_multi
</span></span><span style="display:flex;"><span>  } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> (mode <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;count&#34;</span>) {
</span></span><span style="display:flex;"><span>    mode <span style="color:#f92672">&lt;-</span> <span style="color:#e6db74">&#34;regression&#34;</span>
</span></span><span style="display:flex;"><span>    sl_lib_master <span style="color:#f92672">&lt;-</span> sl_lib_count
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">is.null</span>(sl_lib)) {
</span></span><span style="display:flex;"><span>    sl_lib <span style="color:#f92672">&lt;-</span> sl_lib_master
</span></span><span style="display:flex;"><span>  } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#a6e22e">all</span>(sl_lib <span style="color:#f92672">%in%</span> sl_lib_master)) {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">stop</span>(<span style="color:#a6e22e">paste0</span>(<span style="color:#e6db74">&#34;&#39;sl_lib&#39; must be one of: &#34;</span>, <span style="color:#a6e22e">paste</span>(sl_lib_master, collapse <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;, &#34;</span>)))
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># Step 1: Create recipe</span>
</span></span><span style="display:flex;"><span>  data_rec <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">recipe</span>(<span style="color:#a6e22e">as.formula</span>(formula), data <span style="color:#f92672">=</span> data) <span style="color:#f92672">|&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">step_dummy</span>(<span style="color:#a6e22e">all_nominal_predictors</span>()) <span style="color:#f92672">|&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">step_zv</span>(<span style="color:#a6e22e">all_predictors</span>())
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># Step 2: Initialize workflow</span>
</span></span><span style="display:flex;"><span>  data_wflow <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">workflow</span>() <span style="color:#f92672">|&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">add_recipe</span>(data_rec)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># Step 3: Cross-validation folds</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> (mode <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;classification&#34;</span>) {
</span></span><span style="display:flex;"><span>    folds <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">vfold_cv</span>(data, v <span style="color:#f92672">=</span> cv_v, strata <span style="color:#f92672">=</span> <span style="color:#a6e22e">as.character</span>(formula)[2])
</span></span><span style="display:flex;"><span>  } <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>    folds <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">vfold_cv</span>(data, v <span style="color:#f92672">=</span> cv_v)
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># Tune models</span>
</span></span><span style="display:flex;"><span>  member_list <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">lapply</span>(sl_lib, <span style="color:#66d9ef">function</span>(member) {
</span></span><span style="display:flex;"><span>    mod_spec <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">sl_tidy_workflow</span>(member <span style="color:#f92672">=</span> member, mode <span style="color:#f92672">=</span> mode)
</span></span><span style="display:flex;"><span>    mod_wflow <span style="color:#f92672">&lt;-</span> data_wflow <span style="color:#f92672">|&gt;</span> <span style="color:#a6e22e">add_model</span>(mod_spec)
</span></span><span style="display:flex;"><span>    mod_res <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">tryCatch</span>(
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">suppressWarnings</span>(<span style="color:#a6e22e">tune_grid</span>(
</span></span><span style="display:flex;"><span>        object <span style="color:#f92672">=</span> mod_wflow,
</span></span><span style="display:flex;"><span>        resamples <span style="color:#f92672">=</span> folds,
</span></span><span style="display:flex;"><span>        grid <span style="color:#f92672">=</span> <span style="color:#ae81ff">10</span>,
</span></span><span style="display:flex;"><span>        control <span style="color:#f92672">=</span> <span style="color:#a6e22e">control_stack_grid</span>()
</span></span><span style="display:flex;"><span>      )),
</span></span><span style="display:flex;"><span>      error <span style="color:#f92672">=</span> <span style="color:#66d9ef">function</span>(e) <span style="color:#66d9ef">NULL</span>
</span></span><span style="display:flex;"><span>    )
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#a6e22e">is.null</span>(mod_res)) {
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">cat</span>(<span style="color:#a6e22e">paste0</span>(<span style="color:#e6db74">&#34;Tuned &#34;</span>, member, <span style="color:#e6db74">&#34; model\n&#34;</span>))
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span>(mod_res)
</span></span><span style="display:flex;"><span>  })
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">names</span>(member_list) <span style="color:#f92672">&lt;-</span> sl_lib
</span></span><span style="display:flex;"><span>  member_list <span style="color:#f92672">&lt;-</span> member_list<span style="color:#a6e22e">[lengths</span>(member_list) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># Step 4: Stack models</span>
</span></span><span style="display:flex;"><span>  data_model_st <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">stacks</span>()
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span> (res <span style="color:#66d9ef">in</span> <span style="color:#a6e22e">names</span>(member_list)) {
</span></span><span style="display:flex;"><span>    data_model_st <span style="color:#f92672">&lt;-</span> data_model_st <span style="color:#f92672">|&gt;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">add_candidates</span>(member_list[[res]], name <span style="color:#f92672">=</span> res)
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  data_model_st <span style="color:#f92672">&lt;-</span> data_model_st <span style="color:#f92672">|&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">blend_predictions</span>() <span style="color:#f92672">|&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">fit_members</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span>(data_model_st)
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="real-world-examples"><a href="#real-world-examples" class="header-anchor"></a>Real-World Examples
</h2><p>Let’s see this in action with four datasets, covering binary classification, count regression, standard regression, and multi-class classification. Each dataset is chosen to demonstrate the flexibility of our <code>tidymodels</code> SuperLearner approach, and I’ll provide some context about each to help you understand their relevance.</p>
<h3 id="binary-classification-pima-indians-diabetes"><a href="#binary-classification-pima-indians-diabetes" class="header-anchor"></a>Binary Classification: Pima Indians Diabetes
</h3><p>The <code>PimaIndiansDiabetes2</code> dataset, from the <code>mlbench</code> package, contains medical data on Pima Indian women, including variables like glucose levels, blood pressure, and body mass index (BMI). The goal is to predict diabetes status (positive or negative), making it a classic binary classification problem. This dataset is widely used in machine learning to study diagnostic prediction models, as it reflects real-world medical data with some missing values and class imbalance.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">data</span>(<span style="color:#e6db74">&#34;PimaIndiansDiabetes2&#34;</span>, package <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;mlbench&#34;</span>)
</span></span><span style="display:flex;"><span>diabetes_data <span style="color:#f92672">&lt;-</span> PimaIndiansDiabetes2 <span style="color:#f92672">|&gt;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">na.omit</span>() <span style="color:#f92672">|&gt;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">mutate</span>(diabetes <span style="color:#f92672">=</span> <span style="color:#a6e22e">factor</span>(<span style="color:#a6e22e">if_else</span>(diabetes <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;pos&#34;</span>, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">0</span>)))
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">head</span>(diabetes_data)
</span></span></code></pre></div><pre tabindex="0"><code>##    pregnant glucose pressure triceps insulin mass pedigree age diabetes
## 4         1      89       66      23      94 28.1    0.167  21        0
## 5         0     137       40      35     168 43.1    2.288  33        1
## 7         3      78       50      32      88 31.0    0.248  26        1
## 9         2     197       70      45     543 30.5    0.158  53        1
## 14        1     189       60      23     846 30.1    0.398  59        1
## 15        5     166       72      19     175 25.8    0.587  51        1
</code></pre><p>Let&rsquo;s split the data into training and test sets.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>diabetes_split <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">initial_split</span>(diabetes_data, prop <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.8</span>, strata <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;diabetes&#34;</span>)
</span></span><span style="display:flex;"><span>diabetes_train <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">training</span>(diabetes_split)
</span></span><span style="display:flex;"><span>diabetes_test <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">testing</span>(diabetes_split)
</span></span></code></pre></div><p>Let&rsquo;s now build the superlearner</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>diabetes_SL <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">sl_tidy</span>(diabetes <span style="color:#f92672">~</span> ., data <span style="color:#f92672">=</span> diabetes_train, cv_v <span style="color:#f92672">=</span> <span style="color:#ae81ff">5</span>, mode <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;bin&#34;</span>)
</span></span></code></pre></div><pre tabindex="0"><code>## i Creating pre-processing data to finalize unknown parameter: mtry
</code></pre><pre tabindex="0"><code>## Tuned boost model
</code></pre><pre tabindex="0"><code>## i Creating pre-processing data to finalize unknown parameter: mtry
</code></pre><pre tabindex="0"><code>## Tuned rf model
## Tuned nnet model
## Tuned logit model
## Tuned elasto_logit model
## Tuned qda model
## Tuned lsvm model
## Tuned psvm model
## Tuned rsvm model
</code></pre><pre tabindex="0"><code>## Warning: Predictions from 2 candidates were identical to those from existing candidates
## and were removed from the data stack.
</code></pre><pre tabindex="0"><code>##  Setting default kernel parameters
</code></pre><pre tabindex="0"><code>## Warning: package &#39;future&#39; was built under R version 4.5.1
</code></pre><p>Use the superlearner for prediction</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#75715e"># Predict</span>
</span></span><span style="display:flex;"><span>diabetes_test_pred <span style="color:#f92672">&lt;-</span> diabetes_test <span style="color:#f92672">%&gt;%</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">bind_cols</span>(<span style="color:#a6e22e">predict</span>(diabetes_SL, ., type <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;prob&#34;</span>))
</span></span></code></pre></div><p>Evaluate the ROC AUC</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#75715e"># Evaluate with ROC AUC</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(pROC)
</span></span></code></pre></div><pre tabindex="0"><code>## Type &#39;citation(&#34;pROC&#34;)&#39; for a citation.
</code></pre><pre tabindex="0"><code>## 
## Attaching package: &#39;pROC&#39;
</code></pre><pre tabindex="0"><code>## The following objects are masked from &#39;package:stats&#39;:
## 
##     cov, smooth, var
</code></pre><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>diabetes_roc <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">roc</span>(response <span style="color:#f92672">=</span> diabetes_test_pred<span style="color:#f92672">$</span>diabetes, predictor <span style="color:#f92672">=</span> diabetes_test_pred<span style="color:#f92672">$</span>.pred_1)
</span></span></code></pre></div><pre tabindex="0"><code>## Setting levels: control = 0, case = 1
</code></pre><pre tabindex="0"><code>## Setting direction: controls &lt; cases
</code></pre><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">auc</span>(diabetes_roc)
</span></span></code></pre></div><pre tabindex="0"><code>## Area under the curve: 0.8106
</code></pre><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">ggroc</span>(diabetes_roc) <span style="color:#f92672">+</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">theme_minimal</span>()
</span></span></code></pre></div><img src="/post/2025-08-15-tidy-superlearner/index_files/figure-html/unnamed-chunk-8-1.png" width="672" />
<p>This gives you a model that predicts diabetes with a stacked ensemble, and the ROC curve visualizes its performance in distinguishing between diabetic and non-diabetic cases.</p>
<h3 id="count-data-regression-epileptic-seizures"><a href="#count-data-regression-epileptic-seizures" class="header-anchor"></a>Count Data Regression: Epileptic Seizures
</h3><p>The <code>epil</code> dataset, from the <code>MASS</code> package, records the number of epileptic seizures in patients over time, along with predictors like treatment type and baseline seizure counts. It’s a great example for count regression, as seizure counts are non-negative integers with potential overdispersion, making Poisson. This dataset is often used to study count data in medical research.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">data</span>(<span style="color:#e6db74">&#34;epil&#34;</span>, package <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;MASS&#34;</span>)
</span></span><span style="display:flex;"><span>epil_data <span style="color:#f92672">&lt;-</span> epil <span style="color:#f92672">|&gt;</span> <span style="color:#a6e22e">na.omit</span>() <span style="color:#f92672">|&gt;</span> dplyr<span style="color:#f92672">::</span><span style="color:#a6e22e">select</span>(<span style="color:#f92672">-</span>subject)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">head</span>(epil_data)
</span></span></code></pre></div><pre tabindex="0"><code>##   y     trt base age V4 period      lbase       lage
## 1 5 placebo   11  31  0      1 -0.7563538 0.11420370
## 2 3 placebo   11  31  0      2 -0.7563538 0.11420370
## 3 3 placebo   11  31  0      3 -0.7563538 0.11420370
## 4 3 placebo   11  31  1      4 -0.7563538 0.11420370
## 5 3 placebo   11  30  0      1 -0.7563538 0.08141387
## 6 5 placebo   11  30  0      2 -0.7563538 0.08141387
</code></pre><p>Let&rsquo;s split the data into training and test sets.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>epil_split <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">initial_split</span>(epil_data, prop <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.8</span>)
</span></span><span style="display:flex;"><span>epil_train <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">training</span>(epil_split)
</span></span><span style="display:flex;"><span>epil_test <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">testing</span>(epil_split)
</span></span></code></pre></div><p>Let&rsquo;s now build the superlearner</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>epil_SL <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">sl_tidy</span>(y <span style="color:#f92672">~</span> ., data <span style="color:#f92672">=</span> epil_train, cv_v <span style="color:#f92672">=</span> <span style="color:#ae81ff">5</span>, mode <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;count&#34;</span>)
</span></span></code></pre></div><pre tabindex="0"><code>## i Creating pre-processing data to finalize unknown parameter: mtry
</code></pre><pre tabindex="0"><code>## Tuned boost model
## Tuned knn model
</code></pre><pre tabindex="0"><code>## i Creating pre-processing data to finalize unknown parameter: mtry
</code></pre><pre tabindex="0"><code>## Tuned rf model
## Tuned lsvm model
## Tuned psvm model
## Tuned rsvm model
## Tuned poisson model
## Tuned elasto_poisson model
##  Setting default kernel parameters  
##  Setting default kernel parameters
</code></pre><p>Use the superlearner for prediction</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#75715e"># Predict</span>
</span></span><span style="display:flex;"><span>epil_test_pred <span style="color:#f92672">&lt;-</span> epil_test <span style="color:#f92672">%&gt;%</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">bind_cols</span>(<span style="color:#a6e22e">predict</span>(epil_SL, ., type <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;numeric&#34;</span>))
</span></span></code></pre></div><p>Now visualize</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#75715e"># Visualize</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">ggplot</span>(epil_test_pred, <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> y, y <span style="color:#f92672">=</span> <span style="color:#a6e22e">round</span>(.pred))) <span style="color:#f92672">+</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">geom_point</span>() <span style="color:#f92672">+</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">labs</span>(x <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Observed Seizure Counts&#34;</span>, y <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Predicted Seizure Counts&#34;</span>) <span style="color:#f92672">+</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">theme_minimal</span>()
</span></span></code></pre></div><img src="/post/2025-08-15-tidy-superlearner/index_files/figure-html/unnamed-chunk-13-1.png" width="672" />
<p>The scatter plot shows how well our ensemble predicts seizure counts, useful for evaluating treatment effects in epilepsy studies.</p>
<h3 id="regression-birthweight-prediction"><a href="#regression-birthweight-prediction" class="header-anchor"></a>Regression: Birthweight Prediction
</h3><p>The <code>birthwt</code> dataset, also from the <code>MASS</code> package, contains data on infant birthweights and maternal factors like smoking status, age, and weight. It’s a standard dataset for regression tasks, as birthweight is a continuous outcome influenced by multiple predictors. This dataset is valuable for studying maternal and fetal health, often used in statistical modeling to explore risk factors for low birthweight.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">data</span>(<span style="color:#e6db74">&#34;birthwt&#34;</span>, package <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;MASS&#34;</span>)
</span></span><span style="display:flex;"><span>bwt_data <span style="color:#f92672">&lt;-</span> birthwt <span style="color:#f92672">|&gt;</span> <span style="color:#a6e22e">na.omit</span>()
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">head</span>(bwt_data)
</span></span></code></pre></div><pre tabindex="0"><code>##    low age lwt race smoke ptl ht ui ftv  bwt
## 85   0  19 182    2     0   0  0  1   0 2523
## 86   0  33 155    3     0   0  0  0   3 2551
## 87   0  20 105    1     1   0  0  0   1 2557
## 88   0  21 108    1     1   0  0  1   2 2594
## 89   0  18 107    1     1   0  0  1   0 2600
## 91   0  21 124    3     0   0  0  0   0 2622
</code></pre><p>Let&rsquo;s split the data into training and test sets.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>bwt_split <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">initial_split</span>(bwt_data, prop <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.8</span>)
</span></span><span style="display:flex;"><span>bwt_train <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">training</span>(bwt_split)
</span></span><span style="display:flex;"><span>bwt_test <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">testing</span>(bwt_split)
</span></span></code></pre></div><p>And then Build the superlearner</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>bwt_SL <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">sl_tidy</span>(bwt <span style="color:#f92672">~</span> ., data <span style="color:#f92672">=</span> bwt_train, cv_v <span style="color:#f92672">=</span> <span style="color:#ae81ff">5</span>, mode <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;cont&#34;</span>)
</span></span></code></pre></div><pre tabindex="0"><code>## i Creating pre-processing data to finalize unknown parameter: mtry
</code></pre><pre tabindex="0"><code>## Tuned boost model
## Tuned lm model
## Tuned elasto_lm model
</code></pre><pre tabindex="0"><code>## → A | warning: A correlation computation is required, but `estimate` is constant and has 0
##                standard deviation, resulting in a divide by 0 error. `NA` will be returned.
</code></pre><pre tabindex="0"><code>## 
There were issues with some computations   A: x1

There were issues with some computations   A: x2

There were issues with some computations   A: x3

There were issues with some computations   A: x4

There were issues with some computations   A: x5

There were issues with some computations   A: x5
</code></pre><pre tabindex="0"><code>## Tuned nnet model
## Tuned knn model
</code></pre><pre tabindex="0"><code>## i Creating pre-processing data to finalize unknown parameter: mtry
</code></pre><pre tabindex="0"><code>## Tuned rf model
## Tuned lsvm model
## Tuned psvm model
## Tuned rsvm model
</code></pre><pre tabindex="0"><code>## Warning: The inputted `candidates` argument `nnet` generated notes during
## tuning/resampling. Model stacking may fail due to these issues; see
## `collect_notes()` (`?tune::collect_notes()`) if so.
</code></pre><p>Now, use it for prediction</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#75715e"># Predict</span>
</span></span><span style="display:flex;"><span>bwt_test_pred <span style="color:#f92672">&lt;-</span> bwt_test <span style="color:#f92672">%&gt;%</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">bind_cols</span>(<span style="color:#a6e22e">predict</span>(bwt_SL, ., type <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;numeric&#34;</span>))
</span></span></code></pre></div><p>We can then visualize as follows:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#75715e"># Visualize</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">ggplot</span>(bwt_test_pred, <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> bwt, y <span style="color:#f92672">=</span> <span style="color:#a6e22e">round</span>(.pred))) <span style="color:#f92672">+</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">geom_point</span>() <span style="color:#f92672">+</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">labs</span>(x <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Observed Birthweight (grams)&#34;</span>, y <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Predicted Birthweight (grams)&#34;</span>) <span style="color:#f92672">+</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">theme_minimal</span>()
</span></span></code></pre></div><img src="/post/2025-08-15-tidy-superlearner/index_files/figure-html/unnamed-chunk-18-1.png" width="672" />
<p>This shows how the ensemble performs in predicting birthweight, which can inform medical interventions for at-risk pregnancies.</p>
<h3 id="multi-class-classification-iris-species"><a href="#multi-class-classification-iris-species" class="header-anchor"></a>Multi-Class Classification: Iris Species
</h3><p>The <code>iris</code> dataset, from the <code>datasets</code> package, is a classic in machine learning. It includes measurements of sepal and petal dimensions for three iris species: setosa, versicolor, and virginica. With four continuous predictors and three classes, it’s perfect for multi-class classification. This dataset, introduced by Ronald Fisher, remains a benchmark for testing classification algorithms due to its simplicity and clear class separation.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">data</span>(<span style="color:#e6db74">&#34;iris&#34;</span>, package <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;datasets&#34;</span>)
</span></span><span style="display:flex;"><span>species_data <span style="color:#f92672">&lt;-</span> iris <span style="color:#f92672">|&gt;</span> <span style="color:#a6e22e">na.omit</span>()
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">head</span>(species_data)
</span></span></code></pre></div><pre tabindex="0"><code>##   Sepal.Length Sepal.Width Petal.Length Petal.Width Species
## 1          5.1         3.5          1.4         0.2  setosa
## 2          4.9         3.0          1.4         0.2  setosa
## 3          4.7         3.2          1.3         0.2  setosa
## 4          4.6         3.1          1.5         0.2  setosa
## 5          5.0         3.6          1.4         0.2  setosa
## 6          5.4         3.9          1.7         0.4  setosa
</code></pre><p>We split it into training and test sets:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>species_split <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">initial_split</span>(species_data, prop <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.8</span>, strata <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Species&#34;</span>)
</span></span><span style="display:flex;"><span>species_train <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">training</span>(species_split)
</span></span><span style="display:flex;"><span>species_test <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">testing</span>(species_split)
</span></span></code></pre></div><p>Build the superlearner</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>species_SL <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">sl_tidy</span>(Species <span style="color:#f92672">~</span> ., data <span style="color:#f92672">=</span> species_train, cv_v <span style="color:#f92672">=</span> <span style="color:#ae81ff">5</span>, mode <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;multi&#34;</span>)
</span></span></code></pre></div><pre tabindex="0"><code>## i Creating pre-processing data to finalize unknown parameter: mtry
</code></pre><pre tabindex="0"><code>## Tuned boost model
</code></pre><pre tabindex="0"><code>## i Creating pre-processing data to finalize unknown parameter: mtry
</code></pre><pre tabindex="0"><code>## Tuned rf model
## Tuned multi model
## Tuned elasto_multi model
## Tuned qda model
## Tuned lsvm model
## Tuned psvm model
## Tuned rsvm model
</code></pre><pre tabindex="0"><code>## Warning: Predictions from 14 candidates were identical to those from existing candidates
## and were removed from the data stack.
</code></pre><pre tabindex="0"><code>## Warning: Predictions from 3 candidates were identical to those from existing candidates
## and were removed from the data stack.
</code></pre><pre tabindex="0"><code>##  Setting default kernel parameters
</code></pre><p>Use it for prediction</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#75715e"># Predict</span>
</span></span><span style="display:flex;"><span>species_test_pred <span style="color:#f92672">&lt;-</span> species_test <span style="color:#f92672">%&gt;%</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">bind_cols</span>(<span style="color:#a6e22e">predict</span>(species_SL, ., type <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;prob&#34;</span>))
</span></span></code></pre></div><p>Evaluate the ROC</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#75715e"># Evaluate with multi-class ROC</span>
</span></span><span style="display:flex;"><span>species_roc <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">multiclass.roc</span>(
</span></span><span style="display:flex;"><span>  response <span style="color:#f92672">=</span> species_test_pred<span style="color:#f92672">$</span>Species,
</span></span><span style="display:flex;"><span>  predictor <span style="color:#f92672">=</span> <span style="color:#a6e22e">cbind</span>(
</span></span><span style="display:flex;"><span>    setosa <span style="color:#f92672">=</span> species_test_pred<span style="color:#f92672">$</span>.pred_setosa,
</span></span><span style="display:flex;"><span>    versicolor <span style="color:#f92672">=</span> species_test_pred<span style="color:#f92672">$</span>.pred_versicolor,
</span></span><span style="display:flex;"><span>    virginica <span style="color:#f92672">=</span> species_test_pred<span style="color:#f92672">$</span>.pred_virginica
</span></span><span style="display:flex;"><span>  )
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">auc</span>(species_roc)
</span></span></code></pre></div><pre tabindex="0"><code>## Multi-class area under the curve: 1
</code></pre><p>This evaluates the ensemble’s ability to distinguish between iris species, a task relevant to botanical classification and algorithm benchmarking.</p>
<h2 id="wrapping-up"><a href="#wrapping-up" class="header-anchor"></a>Wrapping Up
</h2><p>Using <code>tidymodels</code>, you can build a SuperLearner-style ensemble that’s flexible, reproducible, and easy to understand. The <code>sl_tidy</code> function simplifies the process, letting you focus on modeling rather than boilerplate code. Whether you’re tackling medical diagnostics (Pima Indians Diabetes), count data (epileptic seizures), health outcomes (birthweight), or classic classification (iris), this approach scales to your needs. Based on github conversations, support for <code>censored regression</code> is coming in <code>stacks</code>, which will enable extension of this for time-to-event data.</p>
<p>Try it out on your own dataset, tweak the model library, and see how stacking can boost your predictions.</p>
<p>💬 Like this blog? Share your thoughts and use-cases on <a class="link" href="https://www.linkedin.com/in/swarnendu-stat/"  target="_blank" rel="noopener"
    >LinkedIn</a> and tag <a class="link" href="https://www.linkedin.com/in/swarnendu-stat/"  target="_blank" rel="noopener"
    >me</a>!</p>
]]></content:encoded>

        <category>Machine Learning</category><category>TidyModels</category><category>SuperLearner</category>
        <category>Machine Learning</category><category>TidyModels</category><category>SuperLearner</category>
      </item><item>
        <title>Predicting Diabetes with Bayesian Neural Networks: More Than Just a Probability</title>

        <link>//post/bnns-binary-classification/</link>
        <pubDate>Fri, 18 Apr 2025 22:21:00 +0530</pubDate>
        

        <guid isPermaLink="true">//post/bnns-binary-classification/</guid><description><blockquote>
<p><em>In critical applications like healthcare, knowing the probability isn’t enough. Knowing how confident we are in that probability makes all the difference.</em></p></blockquote>
<hr>
<h2 id="-the-problem"><a href="//post/bnns-binary-classification/#-the-problem" class="header-anchor"></a>🔍 The Problem
</h2><p>Diabetes prediction models abound, but they often give us <strong>just a number</strong>. Traditional classifiers like logistic regression or random forests will tell you, for instance, that there&rsquo;s a 73% chance someone has diabetes.</p>
<p>But what if we asked:</p>
<blockquote>
<p><em>&ldquo;How sure are we about that 73%?&rdquo;</em></p></description>
        <content:encoded>&lt;![CDATA[<blockquote>
<p><em>In critical applications like healthcare, knowing the probability isn’t enough. Knowing how confident we are in that probability makes all the difference.</em></p></blockquote>
<hr>
<h2 id="-the-problem"><a href="#-the-problem" class="header-anchor"></a>🔍 The Problem
</h2><p>Diabetes prediction models abound, but they often give us <strong>just a number</strong>. Traditional classifiers like logistic regression or random forests will tell you, for instance, that there&rsquo;s a 73% chance someone has diabetes.</p>
<p>But what if we asked:</p>
<blockquote>
<p><em>&ldquo;How sure are we about that 73%?&rdquo;</em></p></blockquote>
<p>Enter <strong>Bayesian Neural Networks</strong> (<code>bnns</code>), where uncertainty isn’t a bug—it’s a feature.</p>
<hr>
<h2 id="-the-data"><a href="#-the-data" class="header-anchor"></a>📊 The Data
</h2><p>We used the <code>PimaIndiansDiabetes2</code> dataset from the <code>mlbench</code> package, containing clinical variables (e.g., glucose, BMI, insulin) and diabetes diagnosis. Missing values were removed, and outcomes were converted to binary.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(bnns)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(mlbench)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(rsample)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(ggplot2)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">set.seed</span>(<span style="color:#ae81ff">123</span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">data</span>(<span style="color:#e6db74">&#34;PimaIndiansDiabetes2&#34;</span>)
</span></span><span style="display:flex;"><span>trial_data <span style="color:#f92672">&lt;-</span> PimaIndiansDiabetes2 <span style="color:#f92672">|&gt;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">transform</span>(diabetes <span style="color:#f92672">=</span> <span style="color:#a6e22e">ifelse</span>(diabetes <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;pos&#34;</span>, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">0</span>)) <span style="color:#f92672">|&gt;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">na.omit</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>trial_data_split <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">initial_split</span>(trial_data, strata <span style="color:#f92672">=</span> diabetes, prop <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.8</span>)
</span></span><span style="display:flex;"><span>trial_data_train <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">training</span>(trial_data_split)
</span></span><span style="display:flex;"><span>trial_data_test <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">testing</span>(trial_data_split)
</span></span></code></pre></div><hr>
<h2 id="-the-model"><a href="#-the-model" class="header-anchor"></a>🧠 The Model
</h2><p>Our BNN has two hidden layers (24 and 12 nodes) and uses Cauchy priors to encourage sparsity. We used logistic output activation (<code>out_act_fn = 2</code>) for binary classification.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>bnn_model <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">bnns</span>(
</span></span><span style="display:flex;"><span>  diabetes <span style="color:#f92672">~</span> .,
</span></span><span style="display:flex;"><span>  data <span style="color:#f92672">=</span> trial_data_train,
</span></span><span style="display:flex;"><span>  L <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>,
</span></span><span style="display:flex;"><span>  nodes <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">24</span>, <span style="color:#ae81ff">12</span>),
</span></span><span style="display:flex;"><span>  act_fn <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">1</span>),
</span></span><span style="display:flex;"><span>  out_act_fn <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>,
</span></span><span style="display:flex;"><span>  iter <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.1e4</span>,
</span></span><span style="display:flex;"><span>  warmup <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.05e4</span>,
</span></span><span style="display:flex;"><span>  chains <span style="color:#f92672">=</span> <span style="color:#ae81ff">4</span>,
</span></span><span style="display:flex;"><span>  cores <span style="color:#f92672">=</span> <span style="color:#ae81ff">4</span>,
</span></span><span style="display:flex;"><span>  prior_weights <span style="color:#f92672">=</span> <span style="color:#a6e22e">list</span>(dist <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;cauchy&#34;</span>, params <span style="color:#f92672">=</span> <span style="color:#a6e22e">list</span>(mu <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>, sigma <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.3</span>)),
</span></span><span style="display:flex;"><span>  prior_bias <span style="color:#f92672">=</span> <span style="color:#a6e22e">list</span>(dist <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;cauchy&#34;</span>, params <span style="color:#f92672">=</span> <span style="color:#a6e22e">list</span>(mu <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>, sigma <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.3</span>))
</span></span><span style="display:flex;"><span>)
</span></span></code></pre></div><hr>
<h2 id="-the-prediction"><a href="#-the-prediction" class="header-anchor"></a>🎯 The Prediction
</h2><p>We predicted probabilities on the test set and extracted the <strong>posterior median</strong> and <strong>95% credible intervals</strong>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>pred <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">predict</span>(bnn_model, newdata <span style="color:#f92672">=</span> trial_data_test)
</span></span><span style="display:flex;"><span>pred_y <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">apply</span>(pred, MARGIN <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>, median)
</span></span><span style="display:flex;"><span>pred_quantiles <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">apply</span>(pred, <span style="color:#ae81ff">1</span>, <span style="color:#66d9ef">function</span>(x) <span style="color:#a6e22e">quantile</span>(x, probs <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">0.025</span>, <span style="color:#ae81ff">0.975</span>)), simplify <span style="color:#f92672">=</span> <span style="color:#66d9ef">FALSE</span>) <span style="color:#f92672">|&gt;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">do.call</span>(rbind, args <span style="color:#f92672">=</span> _)
</span></span></code></pre></div><hr>
<h2 id="-model-performance"><a href="#-model-performance" class="header-anchor"></a>📏 Model Performance
</h2><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">measure_bin</span>(trial_data_test<span style="color:#f92672">$</span>diabetes, pred)
</span></span></code></pre></div><pre tabindex="0"><code>Setting levels: control = 0, case = 1
</code></pre><pre tabindex="0"><code>Setting direction: controls &lt; cases
</code></pre><pre tabindex="0"><code>$conf_mat
   pred_label
obs  0  1
  0 42 11
  1  7 19

$accuracy
[1] 0.7721519

$ROC

Call:
roc.default(response = obs, predictor = pred)

Data: pred in 53 controls (obs 0) &lt; 26 cases (obs 1).
Area under the curve: 0.8353

$AUC
[1] 0.8352685
</code></pre><p>Performance was comparable to classical methods (AUC ~0.835), but with a massive advantage: <strong>uncertainty quantification</strong>.</p>
<hr>
<h2 id="-visualizing-predictions"><a href="#-visualizing-predictions" class="header-anchor"></a>🔬 Visualizing Predictions
</h2><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>plot_data <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">data.frame</span>(
</span></span><span style="display:flex;"><span>  Actual <span style="color:#f92672">=</span> trial_data_test<span style="color:#f92672">$</span>diabetes,
</span></span><span style="display:flex;"><span>  Predicted <span style="color:#f92672">=</span> pred_y,
</span></span><span style="display:flex;"><span>  Lower <span style="color:#f92672">=</span> pred_quantiles[,<span style="color:#ae81ff">1</span>],
</span></span><span style="display:flex;"><span>  Upper <span style="color:#f92672">=</span> pred_quantiles[,<span style="color:#ae81ff">2</span>]
</span></span><span style="display:flex;"><span>) <span style="color:#f92672">|&gt;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">transform</span>(width <span style="color:#f92672">=</span> Upper <span style="color:#f92672">-</span> Lower) <span style="color:#f92672">|&gt;</span>
</span></span><span style="display:flex;"><span>  dplyr<span style="color:#f92672">::</span><span style="color:#a6e22e">arrange</span>(width)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">ggplot</span>(plot_data, <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> Actual, y <span style="color:#f92672">=</span> Predicted)) <span style="color:#f92672">+</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">geom_point</span>(size <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>) <span style="color:#f92672">+</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">geom_errorbar</span>(<span style="color:#a6e22e">aes</span>(ymin <span style="color:#f92672">=</span> Lower, ymax <span style="color:#f92672">=</span> Upper), width <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.05</span>, color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;steelblue&#34;</span>) <span style="color:#f92672">+</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">labs</span>(
</span></span><span style="display:flex;"><span>    title <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;BNN Predictions for Patient Status&#34;</span>,
</span></span><span style="display:flex;"><span>    subtitle <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Error bars show 95% credible intervals&#34;</span>,
</span></span><span style="display:flex;"><span>    x <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Test Set Patient Status&#34;</span>,
</span></span><span style="display:flex;"><span>    y <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Predicted Patient Status&#34;</span>
</span></span><span style="display:flex;"><span>  ) <span style="color:#f92672">+</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">theme_minimal</span>()
</span></span></code></pre></div><img src="/post/bnns-binary-classification/index_files/figure-html/unnamed-chunk-5-1.png" width="672" />
<hr>
<h2 id="-why-use-bnns"><a href="#-why-use-bnns" class="header-anchor"></a>🧠 Why Use <code>bnns</code>?
</h2><ol>
<li><strong>Non-linear modeling</strong>: Captures complex relationships among covariates without heavy pre-specification.</li>
<li><strong>Credible intervals</strong>: Each prediction comes with its uncertainty.</li>
<li><strong>Probability of a probability</strong>:
<ul>
<li>For example: <em>Pr(Pr(Diabetes) &gt; 0.5) &gt; 0.9</em></li>
<li>Translation: &ldquo;We are 90% confident this person has more than 50% risk.&rdquo;</li>
<li>That’s <strong>clinical-grade insight</strong>.</li>
</ul>
</li>
</ol>
<hr>
<h2 id="-final-thoughts"><a href="#-final-thoughts" class="header-anchor"></a>📣 Final Thoughts
</h2><p>Bayesian Neural Networks let us move beyond binary thinking and embrace <strong>informed uncertainty</strong>. When the stakes are high (think medicine, finance, or policy), <code>bnns</code> offers a probabilistic flashlight in the black box jungle.</p>
<blockquote>
<p><em>Ready to stop guessing your predictions? Start modeling your belief about your predictions.</em></p></blockquote>
<p>🔗 <a class="link" href="https://cran.r-project.org/package=bnns"  target="_blank" rel="noopener"
    >Explore the <code>bnns</code> package</a></p>
<p>💬 Like this blog? Share your thoughts and use-cases on <a class="link" href="https://www.linkedin.com/"  target="_blank" rel="noopener"
    >LinkedIn</a> and tag <a class="link" href="https://www.linkedin.com/in/swarnendu-stat/"  target="_blank" rel="noopener"
    >me</a>!</p>
<hr>
]]></content:encoded>

        <category>R</category><category>Bayesian Neural Networks</category><category>Clinical Trials</category>
        <category>Biostatistics</category><category>Machine Learning</category><category>Bayesian Methods</category>
      </item><item>
        <title>Using bnns for TMLE</title>

        <link>//post/bnns-for-tmle/</link>
        <pubDate>Fri, 17 Jan 2025 23:24:25 +0530</pubDate>
        

        <guid isPermaLink="true">//post/bnns-for-tmle/</guid><description><h2 id="introduction"><a href="//post/bnns-for-tmle/#introduction" class="header-anchor"></a>Introduction
</h2><p>This document demonstrates how to use the <a class="link" href="https://cran.r-project.org/package=bnns"  target="_blank" rel="noopener"
    >bnns</a> package with <strong>TMLE</strong> for causal inference. TMLE combines machine learning-based flexible models with statistical principles to produce unbiased and efficient estimators of causal effects, such as the <strong>Average Treatment Effect (ATE)</strong>. The example also highlights how the flexibility of Bayesian Neural Networks (BNNs) can improve TMLE results when handling complex data-generating mechanisms. This tutorial borrows from this <a class="link" href="https://www.khstats.com/blog/tmle/tutorial"  target="_blank" rel="noopener"
    >tmle tutorial</a>.</p>
<hr>
<h2 id="simulating-data"><a href="//post/bnns-for-tmle/#simulating-data" class="header-anchor"></a>Simulating Data
</h2><p>We simulate data where the treatment assignment and outcome are influenced by multiple covariates, and the true ATE is known.</p></description>
        <content:encoded>&lt;![CDATA[<h2 id="introduction"><a href="#introduction" class="header-anchor"></a>Introduction
</h2><p>This document demonstrates how to use the <a class="link" href="https://cran.r-project.org/package=bnns"  target="_blank" rel="noopener"
    >bnns</a> package with <strong>TMLE</strong> for causal inference. TMLE combines machine learning-based flexible models with statistical principles to produce unbiased and efficient estimators of causal effects, such as the <strong>Average Treatment Effect (ATE)</strong>. The example also highlights how the flexibility of Bayesian Neural Networks (BNNs) can improve TMLE results when handling complex data-generating mechanisms. This tutorial borrows from this <a class="link" href="https://www.khstats.com/blog/tmle/tutorial"  target="_blank" rel="noopener"
    >tmle tutorial</a>.</p>
<hr>
<h2 id="simulating-data"><a href="#simulating-data" class="header-anchor"></a>Simulating Data
</h2><p>We simulate data where the treatment assignment and outcome are influenced by multiple covariates, and the true ATE is known.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(bnns)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Set a random seed for reproducibility</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">set.seed</span>(<span style="color:#ae81ff">123</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Simulate data</span>
</span></span><span style="display:flex;"><span>n <span style="color:#f92672">&lt;-</span> <span style="color:#ae81ff">1000</span>  <span style="color:#75715e"># Number of samples</span>
</span></span><span style="display:flex;"><span>X1 <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">rnorm</span>(n)
</span></span><span style="display:flex;"><span>X2 <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">rnorm</span>(n)
</span></span><span style="display:flex;"><span>U <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">rbinom</span>(n, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">0.5</span>)  <span style="color:#75715e"># Unmeasured confounder</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Treatment mechanism (biased by U)</span>
</span></span><span style="display:flex;"><span>ps <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">plogis</span>(<span style="color:#ae81ff">0.5</span> <span style="color:#f92672">*</span> X1 <span style="color:#f92672">-</span> <span style="color:#ae81ff">0.5</span> <span style="color:#f92672">*</span> X2 <span style="color:#f92672">+</span> <span style="color:#ae81ff">0.8</span> <span style="color:#f92672">*</span> U)
</span></span><span style="display:flex;"><span>A <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">rbinom</span>(n, <span style="color:#ae81ff">1</span>, ps)  <span style="color:#75715e"># Treatment assignment</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Outcome mechanism (non-linear and confounded by U)</span>
</span></span><span style="display:flex;"><span>Y_prob <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">plogis</span>(<span style="color:#ae81ff">1</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> X1^2 <span style="color:#f92672">-</span> <span style="color:#ae81ff">1.5</span> <span style="color:#f92672">*</span> X2 <span style="color:#f92672">+</span> <span style="color:#ae81ff">1.2</span> <span style="color:#f92672">*</span> A <span style="color:#f92672">+</span> <span style="color:#ae81ff">1.5</span> <span style="color:#f92672">*</span> U)
</span></span><span style="display:flex;"><span>Y <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">rbinom</span>(n, <span style="color:#ae81ff">1</span>, Y_prob)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Combine into a dataset</span>
</span></span><span style="display:flex;"><span>sim_data <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">data.frame</span>(Y, A, X1, X2)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># True ATE for comparison</span>
</span></span><span style="display:flex;"><span>true_ate <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">mean</span>(<span style="color:#a6e22e">plogis</span>(<span style="color:#ae81ff">1</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> X1^2 <span style="color:#f92672">-</span> <span style="color:#ae81ff">1.5</span> <span style="color:#f92672">*</span> X2 <span style="color:#f92672">+</span> <span style="color:#ae81ff">1.2</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1.5</span> <span style="color:#f92672">*</span> U)) <span style="color:#f92672">-</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">mean</span>(<span style="color:#a6e22e">plogis</span>(<span style="color:#ae81ff">1</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> X1^2 <span style="color:#f92672">-</span> <span style="color:#ae81ff">1.5</span> <span style="color:#f92672">*</span> X2 <span style="color:#f92672">+</span> <span style="color:#ae81ff">1.2</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1.5</span> <span style="color:#f92672">*</span> U))
</span></span><span style="display:flex;"><span>true_ate
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] 0.07431068</span>
</span></span></code></pre></div><hr>
<h2 id="applying-tmle-with-bnns"><a href="#applying-tmle-with-bnns" class="header-anchor"></a>Applying TMLE with <code>bnns</code>
</h2><h3 id="step-1-install-and-load-required-packages"><a href="#step-1-install-and-load-required-packages" class="header-anchor"></a>Step 1: Install and Load Required Packages
</h3><p>Ensure that the <strong><code>bnns</code></strong> and <strong><code>tmle</code></strong> packages are installed.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#75715e"># Install ggplot2 and bnns from CRAN</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># install.packages(&#34;ggplot2&#34;)</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># install.packages(&#34;bnns&#34;)</span>
</span></span></code></pre></div><h3 id="step-2-tmle-implementation"><a href="#step-2-tmle-implementation" class="header-anchor"></a>Step 2: TMLE Implementation
</h3><p>We use <code>tmle</code> to estimate the ATE. Both the treatment mechanism (<code>g</code>) and the outcome mechanism (<code>Q</code>) are modeled using Bayesian Neural Networks via the <code>bnns</code> package.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#75715e">### Step 1: Estimate Q</span>
</span></span><span style="display:flex;"><span>Q <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">bnns</span>(Y <span style="color:#f92672">~</span> <span style="color:#ae81ff">-1</span> <span style="color:#f92672">+</span> ., data <span style="color:#f92672">=</span> sim_data, L <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>, nodes <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">2</span>), act_fn <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">2</span>), out_act_fn <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Q_A <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">predict</span>(Q) <span style="color:#75715e"># obtain predictions for everyone using the treatment they actually received</span>
</span></span><span style="display:flex;"><span>sim_data_1 <span style="color:#f92672">&lt;-</span> sim_data <span style="color:#f92672">|&gt;</span> <span style="color:#a6e22e">transform</span>(A <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>)  <span style="color:#75715e"># data set where everyone received treatment</span>
</span></span><span style="display:flex;"><span>Q_1 <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">predict</span>(Q, newdata <span style="color:#f92672">=</span> sim_data_1) <span style="color:#75715e"># predict on that everyone-exposed data set</span>
</span></span><span style="display:flex;"><span>sim_data_0 <span style="color:#f92672">&lt;-</span> sim_data <span style="color:#f92672">|&gt;</span> <span style="color:#a6e22e">transform</span>(A <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>) <span style="color:#75715e"># data set where no one received treatment</span>
</span></span><span style="display:flex;"><span>Q_0 <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">predict</span>(Q, newdata <span style="color:#f92672">=</span> sim_data_0)
</span></span><span style="display:flex;"><span>dat_tmle <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">lapply</span>(<span style="color:#ae81ff">1</span><span style="color:#f92672">:</span><span style="color:#a6e22e">dim</span>(Q_A)[2], <span style="color:#66d9ef">function</span>(i) <span style="color:#a6e22e">data.frame</span>(Y <span style="color:#f92672">=</span> sim_data<span style="color:#f92672">$</span>Y, A <span style="color:#f92672">=</span> sim_data<span style="color:#f92672">$</span>A, Q_A <span style="color:#f92672">=</span> Q_A[,i], Q_0 <span style="color:#f92672">=</span> Q_0[,i], Q_1 <span style="color:#f92672">=</span> Q_1[,i]))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">### Step 2: Estimate g and compute H(A,W)</span>
</span></span><span style="display:flex;"><span>g <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">bnns</span>(A <span style="color:#f92672">~</span> <span style="color:#ae81ff">-1</span> <span style="color:#f92672">+</span> . <span style="color:#f92672">-</span> Y, data <span style="color:#f92672">=</span> sim_data, L <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>, nodes <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">2</span>), act_fn <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">2</span>), out_act_fn <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>g_w <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">predict</span>(g) <span style="color:#75715e"># Pr(A=1|W)</span>
</span></span><span style="display:flex;"><span>H_1 <span style="color:#f92672">&lt;-</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">/</span>g_w
</span></span><span style="display:flex;"><span>H_0 <span style="color:#f92672">&lt;-</span> <span style="color:#ae81ff">-1</span><span style="color:#f92672">/</span>(<span style="color:#ae81ff">1</span><span style="color:#f92672">-</span>g_w) <span style="color:#75715e"># Pr(A=0|W) is 1-Pr(A=1|W)</span>
</span></span><span style="display:flex;"><span>dat_tmle <span style="color:#f92672">&lt;-</span> <span style="color:#75715e"># add clever covariate data to dat_tmle</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">lapply</span>(<span style="color:#ae81ff">1</span><span style="color:#f92672">:</span><span style="color:#a6e22e">dim</span>(Q_A)[2], <span style="color:#66d9ef">function</span>(i) dat_tmle[[i]] <span style="color:#f92672">|&gt;</span>
</span></span><span style="display:flex;"><span>           <span style="color:#a6e22e">cbind</span>(
</span></span><span style="display:flex;"><span>             H_1 <span style="color:#f92672">=</span> H_1[,i],
</span></span><span style="display:flex;"><span>             H_0 <span style="color:#f92672">=</span> H_0[,i]) <span style="color:#f92672">|&gt;</span>
</span></span><span style="display:flex;"><span>           <span style="color:#a6e22e">transform</span>(H_A <span style="color:#f92672">=</span> <span style="color:#a6e22e">ifelse</span>(A <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>, H_1, <span style="color:#75715e"># if A is 1 (treated), assign H_1</span>
</span></span><span style="display:flex;"><span>                               H_0))  <span style="color:#75715e"># if A is 0 (not treated), assign H_0</span>
</span></span><span style="display:flex;"><span>  )
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">### Step 3: Estimate fluctuation parameter</span>
</span></span><span style="display:flex;"><span>tmle_ate_list <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">lapply</span>(<span style="color:#ae81ff">1</span><span style="color:#f92672">:</span><span style="color:#a6e22e">dim</span>(Q_A)[2], <span style="color:#66d9ef">function</span>(i){
</span></span><span style="display:flex;"><span>  glm_fit <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">glm</span>(Y <span style="color:#f92672">~</span> <span style="color:#ae81ff">-1</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">offset</span>(<span style="color:#a6e22e">qlogis</span>(Q_A)) <span style="color:#f92672">+</span> H_A, data<span style="color:#f92672">=</span>dat_tmle[[i]], family<span style="color:#f92672">=</span>binomial) <span style="color:#75715e"># fixed intercept logistic regression</span>
</span></span><span style="display:flex;"><span>  eps <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">coef</span>(glm_fit) <span style="color:#75715e"># save the only coefficient, called epsilon in TMLE lit</span>
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">### Step 4: Update Q&#39;s</span>
</span></span><span style="display:flex;"><span>  Q_A_update <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">with</span>(dat_tmle[[i]], <span style="color:#a6e22e">plogis</span>(<span style="color:#a6e22e">qlogis</span>(Q_A) <span style="color:#f92672">+</span> eps<span style="color:#f92672">*</span>H_A)) <span style="color:#75715e"># updated expected outcome given treatment actually received</span>
</span></span><span style="display:flex;"><span>  Q_1_update <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">with</span>(dat_tmle[[i]], <span style="color:#a6e22e">plogis</span>(<span style="color:#a6e22e">qlogis</span>(Q_1) <span style="color:#f92672">+</span> eps<span style="color:#f92672">*</span>H_1)) <span style="color:#75715e"># updated expected outcome for everyone receiving treatment</span>
</span></span><span style="display:flex;"><span>  Q_0_update <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">with</span>(dat_tmle[[i]], <span style="color:#a6e22e">plogis</span>(<span style="color:#a6e22e">qlogis</span>(Q_0) <span style="color:#f92672">+</span> eps<span style="color:#f92672">*</span>H_0)) <span style="color:#75715e"># updated expected outcome for everyone not receiving treatment</span>
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">### Step 5: Compute ATE</span>
</span></span><span style="display:flex;"><span>  tmle_ate <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">mean</span>(Q_1_update <span style="color:#f92672">-</span> Q_0_update) <span style="color:#75715e"># mean diff in updated expected outcome estimates  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span>(tmle_ate)
</span></span><span style="display:flex;"><span>})
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>tmle_ate <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">unlist</span>(tmle_ate_list)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">median</span>(tmle_ate)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] 0.08954665</span>
</span></span></code></pre></div><hr>
<h2 id="comparing-tmle-to-traditional-methods"><a href="#comparing-tmle-to-traditional-methods" class="header-anchor"></a>Comparing TMLE to Traditional Methods
</h2><p>To highlight the benefits of TMLE, compare it to other methods such as:</p>
<ol>
<li><strong>IPTW (Inverse Probability of Treatment Weighting)</strong></li>
<li><strong>Naive Comparison (Unadjusted Difference in Means)</strong></li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(tmle)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; Loading required package: glmnet</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; Loading required package: Matrix</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; Loaded glmnet 4.1-8</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; Loading required package: SuperLearner</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; Loading required package: nnls</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; Loading required package: gam</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; Loading required package: splines</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; Loading required package: foreach</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; Loaded gam 1.22-5</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; Super Learner</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; Version: 2.0-29</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; Package created on 2024-02-06</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; Welcome to the tmle package, version 2.0.1.1</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; Use tmleNews() to see details on changes and bug fixes</span>
</span></span><span style="display:flex;"><span>freq_tmle <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">tmle</span>(
</span></span><span style="display:flex;"><span>  Y <span style="color:#f92672">=</span> sim_data<span style="color:#f92672">$</span>Y, A <span style="color:#f92672">=</span> sim_data<span style="color:#f92672">$</span>A, 
</span></span><span style="display:flex;"><span>  W <span style="color:#f92672">=</span> sim_data[, <span style="color:#a6e22e">c</span>(<span style="color:#e6db74">&#34;X1&#34;</span>, <span style="color:#e6db74">&#34;X2&#34;</span>)], 
</span></span><span style="display:flex;"><span>  Q.SL.library <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#e6db74">&#34;SL.glm&#34;</span>, <span style="color:#e6db74">&#34;SL.ranger&#34;</span>),
</span></span><span style="display:flex;"><span>  g.SL.library <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#e6db74">&#34;SL.glm&#34;</span>, <span style="color:#e6db74">&#34;SL.ranger&#34;</span>)
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; Loading required namespace: ranger</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Results</span>
</span></span><span style="display:flex;"><span>freq_tmle_ate <span style="color:#f92672">&lt;-</span> freq_tmle<span style="color:#f92672">$</span>estimates<span style="color:#f92672">$</span>ATE<span style="color:#f92672">$</span>psi
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Naive Comparison</span>
</span></span><span style="display:flex;"><span>naive_ate <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">mean</span>(sim_data<span style="color:#f92672">$</span>Y[sim_data<span style="color:#f92672">$</span>A <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>]) <span style="color:#f92672">-</span> <span style="color:#a6e22e">mean</span>(sim_data<span style="color:#f92672">$</span>Y[sim_data<span style="color:#f92672">$</span>A <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>])
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Summary of Results</span>
</span></span><span style="display:flex;"><span>results <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">data.frame</span>(
</span></span><span style="display:flex;"><span>  Method <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#e6db74">&#34;True ATE&#34;</span>, <span style="color:#e6db74">&#34;BNN_TMLE&#34;</span>, <span style="color:#e6db74">&#34;Freq_TMLE&#34;</span>, <span style="color:#e6db74">&#34;Naive&#34;</span>),
</span></span><span style="display:flex;"><span>  Estimate <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(true_ate, <span style="color:#a6e22e">median</span>(tmle_ate), freq_tmle_ate, naive_ate),
</span></span><span style="display:flex;"><span>  CI_low <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(true_ate, <span style="color:#a6e22e">quantile</span>(tmle_ate, probs <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">0.025</span>)), freq_tmle<span style="color:#f92672">$</span>estimates<span style="color:#f92672">$</span>ATE<span style="color:#f92672">$</span>CI[1], naive_ate),
</span></span><span style="display:flex;"><span>  CI_high <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(true_ate, <span style="color:#a6e22e">quantile</span>(tmle_ate, probs <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">0.975</span>)), freq_tmle<span style="color:#f92672">$</span>estimates<span style="color:#f92672">$</span>ATE<span style="color:#f92672">$</span>CI[2], naive_ate)
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>results
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;      Method   Estimate     CI_low    CI_high</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 1  True ATE 0.07431068 0.07431068 0.07431068</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 2  BNN_TMLE 0.08954665 0.08369176 0.09577273</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 3 Freq_TMLE 0.09309979 0.05910546 0.12709413</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 4     Naive 0.12824940 0.12824940 0.12824940</span>
</span></span></code></pre></div><hr>
<h2 id="visualizing-results"><a href="#visualizing-results" class="header-anchor"></a>Visualizing Results
</h2><p>Plot the estimates from different methods to compare their performance.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(ggplot2)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">ggplot</span>(results, <span style="color:#a6e22e">aes</span>(x <span style="color:#f92672">=</span> forcats<span style="color:#f92672">::</span><span style="color:#a6e22e">fct_reorder</span>(Method, Estimate), y <span style="color:#f92672">=</span> Estimate, fill <span style="color:#f92672">=</span> Method)) <span style="color:#f92672">+</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">geom_bar</span>(stat <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;identity&#34;</span>, color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;black&#34;</span>) <span style="color:#f92672">+</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">geom_hline</span>(yintercept <span style="color:#f92672">=</span> true_ate, linetype <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;dashed&#34;</span>, color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;red&#34;</span>) <span style="color:#f92672">+</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">geom_errorbar</span>(mapping <span style="color:#f92672">=</span> <span style="color:#a6e22e">aes</span>(ymin <span style="color:#f92672">=</span> CI_low, ymax <span style="color:#f92672">=</span> CI_high)) <span style="color:#f92672">+</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">labs</span>(
</span></span><span style="display:flex;"><span>    title <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Comparison of ATE Estimates&#34;</span>,
</span></span><span style="display:flex;"><span>    y <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;ATE Estimate&#34;</span>,
</span></span><span style="display:flex;"><span>    x <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Method&#34;</span>
</span></span><span style="display:flex;"><span>  ) <span style="color:#f92672">+</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">theme_minimal</span>() <span style="color:#f92672">+</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">theme</span>(legend.position <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;none&#34;</span>)
</span></span></code></pre></div><img src="/post/bnns-for-tmle/index_files/figure-html/visualization-1.png" width="672" />
<hr>
<h2 id="summary"><a href="#summary" class="header-anchor"></a>Summary
</h2><p>This tutorial demonstrates how to use the <a class="link" href="https://swarnendu-stat.github.io/bnns/"  target="_blank" rel="noopener"
    >bnns</a> package for TMLE to estimate the Average Treatment Effect (ATE). By leveraging the flexibility of Bayesian Neural Networks, TMLE can handle complex data structures and improve accuracy compared to traditional methods. Use this workflow for applications in clinical trials, epidemiology, and other domains requiring robust causal inference.</p>
]]></content:encoded>

        <category>bnns</category><category>neural network</category><category>Bayesian</category><category>tmle</category>
        <category>R</category><category>bnns</category><category>neural network</category><category>Bayesian</category><category>tmle</category>
      </item><item>
        <title>Power of Base R: A Performance Comparison with dplyr</title>

        <link>//post/power-of-base-r/</link>
        <pubDate>Fri, 17 Jan 2025 22:32:22 +0530</pubDate>
        

        <guid isPermaLink="true">//post/power-of-base-r/</guid><description><h2 id="introduction"><a href="//post/power-of-base-r/#introduction" class="header-anchor"></a>Introduction
</h2><p>This presentation explores the performance differences between base R and the dplyr package for various data manipulation tasks.</p>
<ul>
<li>While dplyr is renowned for its intuitive syntax and efficiency,</li>
<li>base R functions can sometimes outperform it, particularly in large simulations.</li>
</ul>
<p>Understanding these differences can aid in making informed decisions when choosing data wrangling techniques.</p>
<h2 id="the-iris-dataset"><a href="//post/power-of-base-r/#the-iris-dataset" class="header-anchor"></a>The Iris Dataset
</h2><ul>
<li>
<p>The <strong>iris</strong> dataset is a classic dataset in statistics and machine learning, often used for demonstrating data manipulation and analysis techniques.</p></description>
        <content:encoded>&lt;![CDATA[<h2 id="introduction"><a href="#introduction" class="header-anchor"></a>Introduction
</h2><p>This presentation explores the performance differences between base R and the dplyr package for various data manipulation tasks.</p>
<ul>
<li>While dplyr is renowned for its intuitive syntax and efficiency,</li>
<li>base R functions can sometimes outperform it, particularly in large simulations.</li>
</ul>
<p>Understanding these differences can aid in making informed decisions when choosing data wrangling techniques.</p>
<h2 id="the-iris-dataset"><a href="#the-iris-dataset" class="header-anchor"></a>The Iris Dataset
</h2><ul>
<li>
<p>The <strong>iris</strong> dataset is a classic dataset in statistics and machine learning, often used for demonstrating data manipulation and analysis techniques.</p>
</li>
<li>
<p>It contains measurements of flower characteristics for three species of iris: <em>setosa</em>, <em>versicolor</em>, and <em>virginica</em>.</p>
</li>
<li>
<p>Key Features:</p>
</li>
<li>
<p><strong>150 observations</strong>: 50 samples for each species.</p>
</li>
<li>
<p><strong>4 numeric attributes</strong>: Sepal.Length, Sepal.Width, Petal.Length, Petal.Width</p>
</li>
<li>
<p><strong>1 categorical attribute</strong>: Species: The species of the iris flower (<em>setosa</em>, <em>versicolor</em>, <em>virginica</em>).</p>
</li>
</ul>
<h2 id="the-iris-dataset-continued"><a href="#the-iris-dataset-continued" class="header-anchor"></a>The Iris Dataset (continued)
</h2><pre tabindex="0"><code>    Sepal.Length Sepal.Width Petal.Length Petal.Width    Species
1            5.1         3.5          1.4         0.2     setosa
2            4.9         3.0          1.4         0.2     setosa
3            4.7         3.2          1.3         0.2     setosa
51           7.0         3.2          4.7         1.4 versicolor
52           6.4         3.2          4.5         1.5 versicolor
53           6.9         3.1          4.9         1.5 versicolor
101          6.3         3.3          6.0         2.5  virginica
102          5.8         2.7          5.1         1.9  virginica
103          7.1         3.0          5.9         2.1  virginica
</code></pre><img src="/post/power-of-base-r/index_files/figure-html/unnamed-chunk-1-1.png" width="672" />
<h2 id="benchmarking-data-manipulation-tasks"><a href="#benchmarking-data-manipulation-tasks" class="header-anchor"></a>Benchmarking Data Manipulation Tasks
</h2><h2 id="1-filter-rows"><a href="#1-filter-rows" class="header-anchor"></a>1. Filter Rows
</h2><p>Filtering rows is a common operation in data analysis. This section benchmarks the efficiency of base R’s subsetting approaches against the dplyr::filter function. While dplyr provides clean syntax, base R’s performance is more efficient.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>mcb_filter <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">microbenchmark</span>(
</span></span><span style="display:flex;"><span>base_0 <span style="color:#f92672">=</span> iris[iris<span style="color:#f92672">$</span>Species <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;setosa&#34;</span>, ],
</span></span><span style="display:flex;"><span>base_1 <span style="color:#f92672">=</span> <span style="color:#a6e22e">subset</span>(iris, Species <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;setosa&#34;</span>),
</span></span><span style="display:flex;"><span>dplyr <span style="color:#f92672">=</span> <span style="color:#a6e22e">filter</span>(iris, Species <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;setosa&#34;</span>),
</span></span><span style="display:flex;"><span>times <span style="color:#f92672">=</span> <span style="color:#ae81ff">1e3</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>mcb_filter
</span></span></code></pre></div><pre tabindex="0"><code>Unit: microseconds
   expr   min     lq     mean median    uq    max neval
 base_0  27.3  32.70  43.3981  38.20  50.2 1632.3  1000
 base_1  37.4  46.65  59.6620  56.30  67.9 1762.0  1000
  dplyr 365.0 406.55 444.7454 421.35 443.6 3155.3  1000
</code></pre><hr>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">autoplot</span>(mcb_filter) <span style="color:#f92672">+</span> <span style="color:#a6e22e">ggtitle</span>(<span style="color:#e6db74">&#34;Filter: Base R vs dplyr&#34;</span>)
</span></span></code></pre></div><img src="/post/power-of-base-r/index_files/figure-html/unnamed-chunk-2-1.png" width="672" />
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>agg_filter <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">aggregate</span>(time <span style="color:#f92672">~</span> expr, data <span style="color:#f92672">=</span> <span style="color:#a6e22e">data.frame</span>(mcb_filter), mean)<span style="color:#f92672">$</span>time
</span></span></code></pre></div><p>So, base R code is on average 10 times <strong>faster</strong> than dplyr::filter. The absolute difference in 10k simulations is 4.013473 seconds.</p>
<h2 id="2-select-columns"><a href="#2-select-columns" class="header-anchor"></a>2. Select Columns
</h2><p>Selecting specific columns is fundamental to narrowing down datasets. The comparison here shows how base R indexing and the subset function stack up against dplyr::select in terms of speed.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>mcb_select <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">microbenchmark</span>(
</span></span><span style="display:flex;"><span>base_0 <span style="color:#f92672">=</span> iris[, <span style="color:#a6e22e">c</span>(<span style="color:#e6db74">&#34;Sepal.Length&#34;</span>, <span style="color:#e6db74">&#34;Petal.Length&#34;</span>)],
</span></span><span style="display:flex;"><span>base_1 <span style="color:#f92672">=</span> <span style="color:#a6e22e">subset</span>(iris, select <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(Sepal.Length, Petal.Length)),
</span></span><span style="display:flex;"><span>dplyr <span style="color:#f92672">=</span> <span style="color:#a6e22e">select</span>(iris, Sepal.Length, Petal.Length),
</span></span><span style="display:flex;"><span>times <span style="color:#f92672">=</span> <span style="color:#ae81ff">1e3</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>mcb_select
</span></span></code></pre></div><pre tabindex="0"><code>Unit: microseconds
   expr   min     lq     mean median    uq    max neval
 base_0   5.7   6.80   9.2123   9.60  10.8   41.2  1000
 base_1  25.2  31.85  42.6012  43.05  49.1  163.8  1000
  dplyr 434.1 470.00 517.3763 483.65 505.2 2877.8  1000
</code></pre><hr>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">autoplot</span>(mcb_select) <span style="color:#f92672">+</span> <span style="color:#a6e22e">ggtitle</span>(<span style="color:#e6db74">&#34;Select: Base R vs dplyr&#34;</span>)
</span></span></code></pre></div><img src="/post/power-of-base-r/index_files/figure-html/unnamed-chunk-4-1.png" width="672" />
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>agg_select <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">aggregate</span>(time <span style="color:#f92672">~</span> expr, data <span style="color:#f92672">=</span> <span style="color:#a6e22e">data.frame</span>(mcb_select), mean)<span style="color:#f92672">$</span>time
</span></span></code></pre></div><p>So, base R code is on average 56 times <strong>faster</strong> than dplyr::select. The absolute difference in 10k simulations is 5.08164 seconds.</p>
<h2 id="3-addmodify-columns"><a href="#3-addmodify-columns" class="header-anchor"></a>3. Add/Modify Columns
</h2><p>Adding or modifying columns is crucial for feature engineering. Base R provides multiple methods for this, which are benchmarked here against dplyr::mutate for their computational efficiency.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>mcb_mutate <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">microbenchmark</span>(
</span></span><span style="display:flex;"><span>base_0 <span style="color:#f92672">=</span> {iris<span style="color:#f92672">$</span>Sepal_LbyW <span style="color:#f92672">&lt;-</span> iris<span style="color:#f92672">$</span>Sepal.Length <span style="color:#f92672">/</span> iris<span style="color:#f92672">$</span>Sepal.Width},
</span></span><span style="display:flex;"><span>base_1 <span style="color:#f92672">=</span> <span style="color:#a6e22e">transform</span>(iris, Sepal_LbyW <span style="color:#f92672">=</span> Sepal.Length <span style="color:#f92672">/</span> Sepal.Width),
</span></span><span style="display:flex;"><span>dplyr <span style="color:#f92672">=</span> <span style="color:#a6e22e">mutate</span>(iris, Sepal_LbyW <span style="color:#f92672">=</span> Sepal.Length <span style="color:#f92672">/</span> Sepal.Width),
</span></span><span style="display:flex;"><span>times <span style="color:#f92672">=</span> <span style="color:#ae81ff">1e3</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>mcb_mutate
</span></span></code></pre></div><pre tabindex="0"><code>Unit: microseconds
   expr   min    lq     mean median     uq    max neval
 base_0   3.0   4.0   6.2721    6.2   8.00   23.3  1000
 base_1  26.9  38.6  49.7894   49.3  59.90  159.5  1000
  dplyr 368.6 401.8 436.5808  416.6 433.35 2068.8  1000
</code></pre><hr>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">autoplot</span>(mcb_mutate) <span style="color:#f92672">+</span> <span style="color:#a6e22e">ggtitle</span>(<span style="color:#e6db74">&#34;Mutate: Base R vs dplyr&#34;</span>)
</span></span></code></pre></div><img src="/post/power-of-base-r/index_files/figure-html/unnamed-chunk-6-1.png" width="672" />
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>agg_mutate <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">aggregate</span>(time <span style="color:#f92672">~</span> expr, data <span style="color:#f92672">=</span> <span style="color:#a6e22e">data.frame</span>(mcb_mutate), mean)<span style="color:#f92672">$</span>time
</span></span></code></pre></div><p>So, base R code is on average 70 times <strong>faster</strong> than dplyr::mutate. The absolute difference in 10k simulations is 4.303087 seconds.</p>
<h2 id="4-summarise-data"><a href="#4-summarise-data" class="header-anchor"></a>4. Summarise Data
</h2><p>Data summarization helps derive aggregate metrics. This section compares colMeans from base R with dplyr::summarise_if, illustrating their relative performance in summarizing numeric columns.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>mcb_summarise <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">microbenchmark</span>(
</span></span><span style="display:flex;"><span>base_0 <span style="color:#f92672">=</span> <span style="color:#a6e22e">with</span>(iris, <span style="color:#a6e22e">data.frame</span>(Sepal_L_mean <span style="color:#f92672">=</span> <span style="color:#a6e22e">mean</span>(Sepal.Length), Sepal_W_sd <span style="color:#f92672">=</span> <span style="color:#a6e22e">sd</span>(Sepal.Width),
</span></span><span style="display:flex;"><span>Petal_L_mean <span style="color:#f92672">=</span> <span style="color:#a6e22e">mean</span>(Petal.Length), Petal_W_sd <span style="color:#f92672">=</span> <span style="color:#a6e22e">sd</span>(Petal.Width))),
</span></span><span style="display:flex;"><span>dplyr <span style="color:#f92672">=</span> <span style="color:#a6e22e">summarise</span>(iris, Sepal_L_mean <span style="color:#f92672">=</span> <span style="color:#a6e22e">mean</span>(Sepal.Length), Sepal_W_sd <span style="color:#f92672">=</span> <span style="color:#a6e22e">sd</span>(Sepal.Width),
</span></span><span style="display:flex;"><span>Petal_L_mean <span style="color:#f92672">=</span> <span style="color:#a6e22e">mean</span>(Petal.Length), Petal_W_sd <span style="color:#f92672">=</span> <span style="color:#a6e22e">sd</span>(Petal.Width)),
</span></span><span style="display:flex;"><span>times <span style="color:#f92672">=</span> <span style="color:#ae81ff">1e3</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>mcb_summarise
</span></span></code></pre></div><pre tabindex="0"><code>Unit: microseconds
   expr   min     lq     mean median     uq    max neval
 base_0 114.6 134.50 164.4607  167.4 179.75 1637.3  1000
  dplyr 607.5 660.35 709.8235  677.2 699.80 3643.8  1000
</code></pre><hr>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">autoplot</span>(mcb_summarise) <span style="color:#f92672">+</span> <span style="color:#a6e22e">ggtitle</span>(<span style="color:#e6db74">&#34;Summarise: Base R vs dplyr&#34;</span>)
</span></span></code></pre></div><img src="/post/power-of-base-r/index_files/figure-html/unnamed-chunk-8-1.png" width="672" />
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>agg_summarise <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">aggregate</span>(time <span style="color:#f92672">~</span> expr, data <span style="color:#f92672">=</span> <span style="color:#a6e22e">data.frame</span>(mcb_summarise), mean)<span style="color:#f92672">$</span>time
</span></span></code></pre></div><p>So, base R code is on average 4 times <strong>faster</strong> than dplyr::summarise. The absolute difference in 10k simulations is 5.453628 seconds.</p>
<h2 id="5-grouped-summary"><a href="#5-grouped-summary" class="header-anchor"></a>5. Grouped Summary
</h2><p>Aggregating data by groups is often required for advanced analytics. Base R’s aggregate function is tested here against dplyr&rsquo;s group_by and summarise_all functions to highlight performance differences.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>mcb_grp <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">microbenchmark</span>(
</span></span><span style="display:flex;"><span>base_0 <span style="color:#f92672">=</span> <span style="color:#a6e22e">aggregate</span>(. <span style="color:#f92672">~</span> Species, data <span style="color:#f92672">=</span> iris, FUN <span style="color:#f92672">=</span> mean, na.rm <span style="color:#f92672">=</span> <span style="color:#66d9ef">TRUE</span>),
</span></span><span style="display:flex;"><span>dplyr <span style="color:#f92672">=</span> iris <span style="color:#f92672">|&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">group_by</span>(Species) <span style="color:#f92672">|&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">summarise_all</span>(mean, na.rm <span style="color:#f92672">=</span> <span style="color:#66d9ef">TRUE</span>) <span style="color:#f92672">|&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">ungroup</span>(),
</span></span><span style="display:flex;"><span>times <span style="color:#f92672">=</span> <span style="color:#ae81ff">1e3</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>mcb_grp
</span></span></code></pre></div><pre tabindex="0"><code>Unit: microseconds
   expr    min      lq      mean median   uq     max neval
 base_0  673.9  724.25  822.9378  756.3  787 39185.9  1000
  dplyr 2095.8 2181.25 2334.0126 2225.7 2296 14855.4  1000
</code></pre><hr>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">autoplot</span>(mcb_grp) <span style="color:#f92672">+</span> <span style="color:#a6e22e">ggtitle</span>(<span style="color:#e6db74">&#34;Grouped Summarise: Base R vs dplyr&#34;</span>)
</span></span></code></pre></div><img src="/post/power-of-base-r/index_files/figure-html/unnamed-chunk-10-1.png" width="672" />
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>agg_grp <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">aggregate</span>(time <span style="color:#f92672">~</span> expr, data <span style="color:#f92672">=</span> <span style="color:#a6e22e">data.frame</span>(mcb_grp), mean)<span style="color:#f92672">$</span>time
</span></span></code></pre></div><p>So, base R code is on average 3 times <strong>faster</strong> than dplyr::grp. The absolute difference in 10k simulations is 15.110748 seconds.</p>
<h2 id="6-sort-data"><a href="#6-sort-data" class="header-anchor"></a>6. Sort Data
</h2><p>Sorting is essential for ordering data before visualization or further analysis. The benchmarks here compare the classic base R order approach to the elegant dplyr::arrange.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>mcb_sort <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">microbenchmark</span>(
</span></span><span style="display:flex;"><span>base_0 <span style="color:#f92672">=</span> iris<span style="color:#a6e22e">[with</span>(iris, <span style="color:#a6e22e">order</span>(Sepal.Length, Petal.Length)), ],
</span></span><span style="display:flex;"><span>dplyr <span style="color:#f92672">=</span> <span style="color:#a6e22e">arrange</span>(iris, Sepal.Length, Petal.Length),
</span></span><span style="display:flex;"><span>times <span style="color:#f92672">=</span> <span style="color:#ae81ff">1e3</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>mcb_sort
</span></span></code></pre></div><pre tabindex="0"><code>Unit: microseconds
   expr    min      lq     mean  median     uq    max neval
 base_0   39.2   50.60   68.453   70.90   78.2 1642.0  1000
  dplyr 1311.7 1374.85 1483.152 1403.75 1460.9 4921.1  1000
</code></pre><hr>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">autoplot</span>(mcb_sort) <span style="color:#f92672">+</span> <span style="color:#a6e22e">ggtitle</span>(<span style="color:#e6db74">&#34;Sort: Base R vs dplyr&#34;</span>)
</span></span></code></pre></div><img src="/post/power-of-base-r/index_files/figure-html/unnamed-chunk-12-1.png" width="672" />
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>agg_sort <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">aggregate</span>(time <span style="color:#f92672">~</span> expr, data <span style="color:#f92672">=</span> <span style="color:#a6e22e">data.frame</span>(mcb_sort), mean)<span style="color:#f92672">$</span>time
</span></span></code></pre></div><p>So, base R code is on average 22 times <strong>faster</strong> than dplyr::arrange. The absolute difference in 10k simulations is 14.146992 seconds.</p>
<h2 id="7-join-data"><a href="#7-join-data" class="header-anchor"></a>7. Join Data
</h2><p>Data joins are indispensable when working with relational datasets. This section demonstrates the efficiency of base R’s merge function compared to dplyr::left_join.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>iris<span style="color:#f92672">$</span>id <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">sample.int</span>(<span style="color:#a6e22e">nrow</span>(iris), replace <span style="color:#f92672">=</span> <span style="color:#66d9ef">FALSE</span>)
</span></span><span style="display:flex;"><span>iris2 <span style="color:#f92672">&lt;-</span> iris<span style="color:#a6e22e">[sample</span>(<span style="color:#a6e22e">nrow</span>(iris)),]
</span></span><span style="display:flex;"><span>mcb_join <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">microbenchmark</span>(
</span></span><span style="display:flex;"><span>base_0 <span style="color:#f92672">=</span> <span style="color:#a6e22e">merge</span>(iris, iris2, by <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;id&#34;</span>, all.x <span style="color:#f92672">=</span> <span style="color:#66d9ef">TRUE</span>),
</span></span><span style="display:flex;"><span>dplyr <span style="color:#f92672">=</span> <span style="color:#a6e22e">left_join</span>(iris, iris2, by <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;id&#34;</span>),
</span></span><span style="display:flex;"><span>times <span style="color:#f92672">=</span> <span style="color:#ae81ff">1e3</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>mcb_join
</span></span></code></pre></div><pre tabindex="0"><code>Unit: microseconds
   expr   min     lq     mean median     uq    max neval
 base_0 256.0 303.55 350.0250 340.10 355.05 2151.8  1000
  dplyr 694.1 736.25 806.4005 756.05 799.95 5727.6  1000
</code></pre><hr>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">autoplot</span>(mcb_join) <span style="color:#f92672">+</span> <span style="color:#a6e22e">ggtitle</span>(<span style="color:#e6db74">&#34;Join: Base R vs dplyr&#34;</span>)
</span></span></code></pre></div><img src="/post/power-of-base-r/index_files/figure-html/unnamed-chunk-14-1.png" width="672" />
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>agg_join <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">aggregate</span>(time <span style="color:#f92672">~</span> expr, data <span style="color:#f92672">=</span> <span style="color:#a6e22e">data.frame</span>(mcb_join), mean)<span style="color:#f92672">$</span>time
</span></span></code></pre></div><p>So, base R code is on average 2 times <strong>faster</strong> than dplyr::left_join. The absolute difference in 10k simulations is 4.563755 seconds.</p>
<h2 id="8-group-and-apply-function-1"><a href="#8-group-and-apply-function-1" class="header-anchor"></a>8. Group and Apply Function 1
</h2><p>Applying models or transformations to groups of data is a frequent task in statistical workflows. This benchmark showcases the performance of split and lapply in base R versus dplyr::group_map.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>mcb_grp_map <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">microbenchmark</span>(
</span></span><span style="display:flex;"><span>base_0 <span style="color:#f92672">=</span> <span style="color:#a6e22e">lapply</span>(<span style="color:#a6e22e">split</span>(iris, iris<span style="color:#f92672">$</span>Species), <span style="color:#66d9ef">function</span>(x) <span style="color:#a6e22e">lm</span>(Sepal.Length <span style="color:#f92672">~</span> Petal.Length, data <span style="color:#f92672">=</span> x)),
</span></span><span style="display:flex;"><span>dplyr <span style="color:#f92672">=</span> iris <span style="color:#f92672">|&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">group_by</span>(Species) <span style="color:#f92672">|&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">group_map</span>(<span style="color:#f92672">~</span> <span style="color:#a6e22e">lm</span>(Sepal.Length <span style="color:#f92672">~</span> Petal.Length, data <span style="color:#f92672">=</span> .x)),
</span></span><span style="display:flex;"><span>times <span style="color:#f92672">=</span> <span style="color:#ae81ff">1e3</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>mcb_grp_map
</span></span></code></pre></div><pre tabindex="0"><code>Unit: microseconds
   expr    min      lq      mean  median      uq    max neval
 base_0  761.6  850.80  950.6823  884.80  940.45 4405.0  1000
  dplyr 2447.7 2543.05 2780.8759 2656.45 2811.50 5602.4  1000
</code></pre><hr>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">autoplot</span>(mcb_grp_map) <span style="color:#f92672">+</span> <span style="color:#a6e22e">ggtitle</span>(<span style="color:#e6db74">&#34;Group Map: Base R vs dplyr&#34;</span>)
</span></span></code></pre></div><img src="/post/power-of-base-r/index_files/figure-html/unnamed-chunk-16-1.png" width="672" />
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>agg_grp_map <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">aggregate</span>(time <span style="color:#f92672">~</span> expr, data <span style="color:#f92672">=</span> <span style="color:#a6e22e">data.frame</span>(mcb_grp_map), mean)<span style="color:#f92672">$</span>time
</span></span></code></pre></div><p>So, base R code is on average 3 times <strong>faster</strong> than dplyr::group_map. The absolute difference in 10k simulations is 18.301936 seconds.</p>
<h2 id="9-group-and-apply-function-2"><a href="#9-group-and-apply-function-2" class="header-anchor"></a>9. Group and Apply Function 2
</h2><p>Complex operations on grouped data are common in analytical pipelines. This comparison highlights the performance of base R’s split and lapply with a row-binding step versus dplyr::group_modify.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>mcb_grp_mod <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">microbenchmark</span>(
</span></span><span style="display:flex;"><span>base_0 <span style="color:#f92672">=</span> <span style="color:#a6e22e">do.call</span>(rbind, <span style="color:#a6e22e">lapply</span>(<span style="color:#a6e22e">split</span>(iris, iris<span style="color:#f92672">$</span>Species), <span style="color:#66d9ef">function</span>(x) 
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">data.frame</span>(<span style="color:#a6e22e">summary</span>(<span style="color:#a6e22e">lm</span>(Sepal.Length <span style="color:#f92672">~</span> Petal.Length, data <span style="color:#f92672">=</span> x))<span style="color:#f92672">$</span>coefficients))),
</span></span><span style="display:flex;"><span>dplyr <span style="color:#f92672">=</span> iris <span style="color:#f92672">|&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">group_by</span>(Species) <span style="color:#f92672">|&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">group_modify</span>(<span style="color:#f92672">~</span> <span style="color:#a6e22e">data.frame</span>(<span style="color:#a6e22e">summary</span>(<span style="color:#a6e22e">lm</span>(Sepal.Length <span style="color:#f92672">~</span> Petal.Length, data <span style="color:#f92672">=</span> .x))<span style="color:#f92672">$</span>coefficients)) <span style="color:#f92672">|&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">ungroup</span>(),
</span></span><span style="display:flex;"><span>times <span style="color:#f92672">=</span> <span style="color:#ae81ff">1e3</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>mcb_grp_mod
</span></span></code></pre></div><pre tabindex="0"><code>Unit: milliseconds
   expr    min      lq     mean  median      uq     max neval
 base_0 1.4087 1.50025 1.594760 1.53825 1.59505  3.7525  1000
  dplyr 4.5044 4.69865 5.065493 4.80680 5.03665 44.4467  1000
</code></pre><hr>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">autoplot</span>(mcb_grp_mod) <span style="color:#f92672">+</span> <span style="color:#a6e22e">ggtitle</span>(<span style="color:#e6db74">&#34;Group Modify: Base R vs dplyr&#34;</span>)
</span></span></code></pre></div><img src="/post/power-of-base-r/index_files/figure-html/unnamed-chunk-18-1.png" width="672" />
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>agg_grp_mod <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">aggregate</span>(time <span style="color:#f92672">~</span> expr, data <span style="color:#f92672">=</span> <span style="color:#a6e22e">data.frame</span>(mcb_grp_mod), mean)<span style="color:#f92672">$</span>time
</span></span></code></pre></div><p>So, base R code is on average 3 times <strong>faster</strong> than dplyr::group_modify. The absolute difference in 10k simulations is 34.707333 seconds.</p>
<h2 id="10-rowwise"><a href="#10-rowwise" class="header-anchor"></a>10. Rowwise
</h2><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>mcb_rowwise <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">microbenchmark</span>(base_0 <span style="color:#f92672">=</span> <span style="color:#a6e22e">transform</span>(iris, 
</span></span><span style="display:flex;"><span>Sepal_sd <span style="color:#f92672">=</span> <span style="color:#a6e22e">apply</span>(<span style="color:#a6e22e">cbind</span>(Sepal.Length, Sepal.Width), <span style="color:#ae81ff">1</span>, sd),
</span></span><span style="display:flex;"><span>Petal_sd <span style="color:#f92672">=</span> <span style="color:#a6e22e">apply</span>(<span style="color:#a6e22e">cbind</span>(Petal.Length, Petal.Width), <span style="color:#ae81ff">1</span>, sd)),
</span></span><span style="display:flex;"><span>dplyr <span style="color:#f92672">=</span> iris <span style="color:#f92672">|&gt;</span>
</span></span><span style="display:flex;"><span>dplyr<span style="color:#f92672">::</span><span style="color:#a6e22e">rowwise</span>() <span style="color:#f92672">|&gt;</span>
</span></span><span style="display:flex;"><span>dplyr<span style="color:#f92672">::</span><span style="color:#a6e22e">mutate</span>(Sepal_sd <span style="color:#f92672">=</span> <span style="color:#a6e22e">sd</span>(<span style="color:#a6e22e">c</span>(Sepal.Length, Sepal.Width)),
</span></span><span style="display:flex;"><span>Petal_sd <span style="color:#f92672">=</span> <span style="color:#a6e22e">sd</span>(<span style="color:#a6e22e">c</span>(Petal.Length, Petal.Width))) <span style="color:#f92672">|&gt;</span>
</span></span><span style="display:flex;"><span>dplyr<span style="color:#f92672">::</span><span style="color:#a6e22e">ungroup</span>(),
</span></span><span style="display:flex;"><span>times <span style="color:#f92672">=</span> <span style="color:#ae81ff">1e3</span>)
</span></span></code></pre></div><hr>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">autoplot</span>(mcb_rowwise) <span style="color:#f92672">+</span> <span style="color:#a6e22e">ggtitle</span>(<span style="color:#e6db74">&#34;Rowwise: Base R vs dplyr&#34;</span>)
</span></span></code></pre></div><img src="/post/power-of-base-r/index_files/figure-html/unnamed-chunk-20-1.png" width="672" />
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>agg_rowwise <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">aggregate</span>(time <span style="color:#f92672">~</span> expr, data <span style="color:#f92672">=</span> <span style="color:#a6e22e">data.frame</span>(mcb_rowwise), mean)<span style="color:#f92672">$</span>time
</span></span></code></pre></div><p>So, base R code is on average 3 times <strong>faster</strong> than dplyr::rowwise. The absolute difference in 10k simulations is 22.976678 seconds.</p>
<h2 id="11-count-rows-by-group"><a href="#11-count-rows-by-group" class="header-anchor"></a>11. Count Rows by Group
</h2><p>Counting the number of rows by group is a simple yet frequent operation. The comparison here emphasizes the efficiency of base R’s table function against dplyr::count.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>mcb_count <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">microbenchmark</span>(
</span></span><span style="display:flex;"><span>base_0 <span style="color:#f92672">=</span> <span style="color:#a6e22e">table</span>(iris<span style="color:#f92672">$</span>Species),
</span></span><span style="display:flex;"><span>dplyr <span style="color:#f92672">=</span> iris <span style="color:#f92672">|&gt;</span> <span style="color:#a6e22e">count</span>(Species),
</span></span><span style="display:flex;"><span>times <span style="color:#f92672">=</span> <span style="color:#ae81ff">1e3</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>mcb_count
</span></span></code></pre></div><pre tabindex="0"><code>Unit: microseconds
   expr    min      lq      mean median     uq    max neval
 base_0   14.8   21.30   31.7192   36.6   38.8  176.9  1000
  dplyr 1396.4 1454.55 1585.3359 1502.1 1578.7 4258.1  1000
</code></pre><hr>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">autoplot</span>(mcb_count) <span style="color:#f92672">+</span> <span style="color:#a6e22e">ggtitle</span>(<span style="color:#e6db74">&#34;Count: Base R vs dplyr&#34;</span>)
</span></span></code></pre></div><img src="/post/power-of-base-r/index_files/figure-html/unnamed-chunk-22-1.png" width="672" />
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>agg_count <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">aggregate</span>(time <span style="color:#f92672">~</span> expr, data <span style="color:#f92672">=</span> <span style="color:#a6e22e">data.frame</span>(mcb_count), mean)<span style="color:#f92672">$</span>time
</span></span></code></pre></div><p>So, base R code is on average 50 times <strong>faster</strong> than dplyr::count. The absolute difference in 10k simulations is 15.536167 seconds.</p>
<h2 id="12-identify-distinct-rows"><a href="#12-identify-distinct-rows" class="header-anchor"></a>12. Identify Distinct Rows
</h2><p>Identifying unique rows is crucial for deduplication. This benchmark compares base R’s unique function with dplyr::distinct, shedding light on performance differences for this operation.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>mcb_distinct <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">microbenchmark</span>(
</span></span><span style="display:flex;"><span>base_0 <span style="color:#f92672">=</span> <span style="color:#a6e22e">unique</span>(<span style="color:#a6e22e">rbind</span>(iris, iris)),
</span></span><span style="display:flex;"><span>dplyr <span style="color:#f92672">=</span> <span style="color:#a6e22e">distinct</span>(<span style="color:#a6e22e">rbind</span>(iris, iris)),
</span></span><span style="display:flex;"><span>times <span style="color:#f92672">=</span> <span style="color:#ae81ff">1e3</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>mcb_distinct
</span></span></code></pre></div><pre tabindex="0"><code>Unit: microseconds
   expr   min     lq     mean median     uq     max neval
 base_0 551.1 587.85 682.7063  608.1 638.45 39456.5  1000
  dplyr 247.7 285.20 320.7242  298.1 315.30  2128.6  1000
</code></pre><hr>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">autoplot</span>(mcb_distinct) <span style="color:#f92672">+</span> <span style="color:#a6e22e">ggtitle</span>(<span style="color:#e6db74">&#34;Distinct: Base R vs dplyr&#34;</span>)
</span></span></code></pre></div><img src="/post/power-of-base-r/index_files/figure-html/unnamed-chunk-24-1.png" width="672" />
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>agg_distinct <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">aggregate</span>(time <span style="color:#f92672">~</span> expr, data <span style="color:#f92672">=</span> <span style="color:#a6e22e">data.frame</span>(mcb_distinct), mean)<span style="color:#f92672">$</span>time
</span></span></code></pre></div><p>So, base R code is on average 2 times <strong>slower</strong> than dplyr::distinct. The absolute difference in 10k simulations is 3.619821 seconds.</p>
<h2 id="summary"><a href="#summary" class="header-anchor"></a>Summary
</h2><p>Given that these functions are very commonly used, it is fair to assume that these functions are used at least 5 times in a standard simulation code. If that simulation is repeated for 10k times, then the total gain we have by using base R is at least 11.7146347 minutes.</p>
<h2 id="conclusion"><a href="#conclusion" class="header-anchor"></a>Conclusion
</h2><p>This analysis demonstrates</p>
<ul>
<li>that while dplyr offers user-friendly functions and a consistent syntax,</li>
<li>base R can often be <strong>faster</strong> for basic operations, especially with large datasets.</li>
</ul>
<p>The choice between base R and dplyr should consider both readability and computational efficiency, dependent on the scale and complexity of your data tasks.</p>
<ul>
<li>For intensive data simulations, careful function choice can lead to significant performance gains,</li>
<li>underscoring the importance of benchmarking and profiling in the R language.</li>
</ul>
]]></content:encoded>

        <category>R</category><category>dplyr</category><category>tidyverse</category><category>base R</category>
        <category>R</category><category>dplyr</category><category>tidyverse</category><category>base R</category>
      </item></channel>
</rss>
